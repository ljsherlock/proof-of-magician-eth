{"version":3,"sources":["assets/orb.svg","../../contracts/src/abis.js","../../contracts/src/addresses.js","utilities/screenRecord.js","assets/emblem.svg","components/animation.js","components/index.js","components/screenRecorder.js","utilities/ipfs-helpers.js","App.js","index.js"],"names":["_defs","_path","_path2","_path3","_path4","_path5","_path6","_path7","_path8","_path9","_path10","_path11","_path12","_path13","_path14","_path15","_path16","_path17","_path18","_path19","_path20","_path21","_path22","_path23","_path24","_path25","_path26","_path27","_g","_g2","_path28","_path29","_g3","_path30","abis","erc20","ownable","addresses","ceaErc20","screenRecord","this","chunks","blob","url","mediaRecorder","stream","startRecording","bind","stopRecording","addBlobToIPFS","account","number","mintToken","send","ipfsResultObj","startRandomColorTest","handleStopRecording","a","setState","ipfsResult","navigator","mediaDevices","getDisplayMedia","preferCurrentTab","MediaRecorder","mimeType","ondataavailable","e","console","log","data","push","window","startTimer","onstop","Blob","type","URL","createObjectURL","video","document","querySelector","videoWrapper","src","style","display","play","start","stop","getTracks","forEach","track","_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgOrb","_ref","svgRef","title","titleId","props","xmlns","xmlnsXlink","width","zoomAndPan","viewBox","height","preserveAspectRatio","ref","id","d","clipRule","fill","fillOpacity","fillRule","clipPath","ForwardRef","SvgEmblem","$","timerStatus","consecutiveColors","el","getElementById","property","seconds","randomNumber","limit","Math","floor","random","fadeDuration","randomRGBGenerator","r","g","b","startBtn","setAttribute","box2","randomRGBBox2","getRGB","str","match","parseInt","rgb2lab","rgb","x","y","z","pow","hideOrb","backgroundColor","randomRGB","colorName","setProperty","colorname2","css","rangecolor","labA","labB","deltaL","deltaA","deltaB","c1","sqrt","deltaC","deltaH","deltaLKlsl","deltaCkcsc","deltaHkhsh","deltaE","text","stopTimer","fadeIn","setTimeout","fadeOut","removeAttribute","clearInterval","addEventListener","BrandingContainer","styled","div","Body","Button","button","Container","Header","header","NoticeBarContainer","img","attrs","rel","NoticeBar","NoticeBar2","NoticeButton","ScreenRecorder","state","initiated","handleStop","on","recorder","etherscanURI","className","onClick","handleStart","controls","pointerEvents","autoPlay","playsInline","loop","href","undefined","metadataURI","React","Component","ipfsAddOptions","cidVersion","hashAlg","makeGatewayURL","ipfsURI","ipfsGatewayURL","cidOrURI","startsWith","slice","stripIpfsUriPrefix","makeNFTMetadata","assetURI","options","name","description","ensureIpfsUriPrefix","uri","toString","replace","WalletButton","useState","rendered","setRendered","ens","useLookupAddress","useEthers","activateBrowserWallet","deactivate","error","useEffect","shortenAddress","message","ProofofMagician","minted","contract","Contract","daoNetwork","tokenId","buffer","ipfsPath","basename","ownerAddress","ipfs","IPFSHTTPClient","create","add","path","content","mode","ipfsResponse","assetCid","cid","owner","metadata","JSON","stringify","metadataCid","result","assetGatewayURL","metadataGatewayURL","that","clientSideCalltoIPFS","then","response","tokenID","catch","App","useContractFunction","config","readOnlyChainId","Mainnet","chainId","readOnlyUrls","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","DAppProvider","ApolloProvider"],"mappings":"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","file":"static/js/main.c8616405.chunk.js","sourcesContent":["var _defs, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20, _path21, _path22, _path23, _path24, _path25, _path26, _path27, _g, _g2, _path28, _path29, _g3, _path30;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgOrb(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: 800,\n    zoomAndPan: \"magnify\",\n    viewBox: \"0 0 600 449.999984\",\n    height: 600,\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"id1\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M 317 220 L 500.515625 220 L 500.515625 435.753906 L 317 435.753906 Z M 317 220 \",\n    clipRule: \"nonzero\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"id2\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M 99.265625 220 L 283 220 L 283 435.753906 L 99.265625 435.753906 Z M 99.265625 220 \",\n    clipRule: \"nonzero\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"id3\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M 287 14.253906 L 310 14.253906 L 310 53 L 287 53 Z M 287 14.253906 \",\n    clipRule: \"nonzero\"\n  })))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 294.074219 186.074219 C 295.699219 188.808594 298.398438 199.703125 298.398438 199.703125 C 298.398438 199.703125 301.101562 188.808594 302.726562 186.074219 C 304.347656 183.34375 310.820312 178.789062 310.820312 178.789062 C 310.820312 178.789062 304.347656 174.238281 302.726562 171.507812 C 301.101562 168.777344 298.398438 157.878906 298.398438 157.878906 C 298.398438 157.878906 295.699219 168.773438 294.074219 171.507812 C 292.449219 174.238281 285.980469 178.789062 285.980469 178.789062 C 285.980469 178.789062 292.449219 183.34375 294.074219 186.074219 Z M 294.074219 186.074219 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 322.90625 289.941406 C 323.035156 290.515625 323.550781 290.90625 324.117188 290.90625 C 324.214844 290.90625 324.300781 290.894531 324.398438 290.875 C 325.066406 290.71875 325.484375 290.054688 325.332031 289.390625 L 313.992188 239.621094 C 313.933594 239.367188 313.75 239.195312 313.570312 239.03125 C 315.378906 238.558594 317.152344 238.003906 318.882812 237.371094 C 318.882812 237.546875 318.824219 237.714844 318.898438 237.886719 L 327.019531 256.226562 C 327.222656 256.691406 327.679688 256.96875 328.15625 256.96875 C 328.324219 256.96875 328.492188 256.933594 328.664062 256.863281 C 329.289062 256.585938 329.570312 255.851562 329.292969 255.222656 L 321.175781 236.882812 C 321.121094 236.765625 320.996094 236.726562 320.910156 236.636719 C 322.695312 235.910156 324.433594 235.101562 326.128906 234.210938 L 353.394531 277.289062 C 353.625 277.664062 354.027344 277.867188 354.441406 277.867188 C 354.667969 277.867188 354.898438 277.800781 355.105469 277.671875 C 355.683594 277.304688 355.855469 276.535156 355.488281 275.957031 L 328.296875 233 C 330.101562 231.957031 331.839844 230.816406 333.523438 229.59375 C 333.535156 229.609375 333.53125 229.625 333.539062 229.640625 L 346.425781 245.003906 C 346.675781 245.296875 347.023438 245.445312 347.375 245.445312 C 347.65625 245.445312 347.941406 245.351562 348.175781 245.152344 C 348.695312 244.710938 348.765625 243.929688 348.324219 243.402344 L 335.5 228.109375 C 336.984375 226.9375 338.410156 225.699219 339.777344 224.394531 C 339.847656 224.53125 339.859375 224.695312 339.984375 224.804688 L 378.789062 257.9375 C 379.023438 258.140625 379.304688 258.234375 379.59375 258.234375 C 379.941406 258.234375 380.292969 258.085938 380.539062 257.796875 C 380.984375 257.277344 380.917969 256.492188 380.398438 256.050781 L 341.59375 222.917969 C 341.53125 222.863281 341.441406 222.882812 341.367188 222.84375 C 343.023438 221.140625 344.558594 219.320312 346.003906 217.433594 C 346.070312 217.492188 346.074219 217.585938 346.144531 217.632812 L 363.078125 228.363281 C 363.285156 228.492188 363.515625 228.558594 363.742188 228.558594 C 364.15625 228.558594 364.558594 228.351562 364.789062 227.980469 C 365.15625 227.398438 364.984375 226.632812 364.40625 226.265625 L 347.472656 215.535156 C 347.457031 215.527344 347.445312 215.535156 347.433594 215.527344 C 348.390625 214.167969 349.285156 212.75 350.136719 211.3125 C 350.195312 211.34375 350.21875 211.421875 350.285156 211.445312 L 398.488281 228.167969 C 398.625 228.214844 398.761719 228.238281 398.894531 228.238281 C 399.414062 228.238281 399.890625 227.917969 400.066406 227.40625 C 400.292969 226.757812 399.949219 226.046875 399.304688 225.824219 L 351.367188 209.195312 C 352.261719 207.523438 353.082031 205.808594 353.808594 204.050781 C 353.914062 204.121094 353.96875 204.238281 354.097656 204.273438 L 373.382812 209.75 C 373.492188 209.78125 373.609375 209.796875 373.71875 209.796875 C 374.261719 209.796875 374.757812 209.4375 374.910156 208.890625 C 375.097656 208.230469 374.71875 207.542969 374.054688 207.355469 L 354.773438 201.878906 C 354.710938 201.863281 354.660156 201.910156 354.601562 201.898438 C 355.160156 200.382812 355.683594 198.84375 356.125 197.273438 L 406.359375 204.957031 C 406.425781 204.964844 406.484375 204.96875 406.550781 204.96875 C 407.15625 204.96875 407.6875 204.535156 407.777344 203.917969 C 407.878906 203.242188 407.414062 202.605469 406.738281 202.5 L 356.75 194.855469 C 357.09375 193.386719 357.375 191.902344 357.613281 190.402344 C 357.683594 190.417969 357.71875 190.480469 357.78125 190.488281 L 377.777344 191.9375 C 377.8125 191.9375 377.839844 191.9375 377.871094 191.9375 C 378.515625 191.9375 379.0625 191.4375 379.105469 190.785156 C 379.160156 190.097656 378.644531 189.507812 377.964844 189.453125 L 357.988281 188.003906 C 358.128906 186.753906 358.199219 185.488281 358.269531 184.214844 L 408.832031 184.214844 C 409.519531 184.214844 410.074219 183.660156 410.074219 182.972656 C 410.074219 182.289062 409.519531 181.730469 408.832031 181.730469 L 358.390625 181.730469 C 358.394531 181.480469 358.429688 181.234375 358.429688 180.980469 C 358.429688 179.765625 358.320312 178.570312 358.246094 177.371094 L 377.914062 175.226562 C 378.59375 175.152344 379.085938 174.542969 379.011719 173.863281 C 378.9375 173.175781 378.386719 172.683594 377.648438 172.757812 L 358.121094 174.886719 C 357.9375 173.070312 357.648438 171.289062 357.304688 169.523438 L 406.246094 155.90625 C 406.90625 155.722656 407.292969 155.035156 407.109375 154.375 C 406.925781 153.714844 406.230469 153.335938 405.574219 153.507812 L 356.746094 167.09375 C 356.296875 165.230469 355.78125 163.402344 355.167969 161.609375 L 373.6875 154.410156 C 374.328125 154.160156 374.640625 153.441406 374.398438 152.804688 C 374.144531 152.164062 373.4375 151.84375 372.789062 152.09375 L 354.3125 159.277344 C 353.511719 157.222656 352.625 155.21875 351.609375 153.28125 L 394.71875 126.5625 C 395.300781 126.203125 395.480469 125.4375 395.121094 124.855469 C 394.753906 124.273438 393.984375 124.09375 393.410156 124.453125 L 350.410156 151.105469 C 349.441406 149.429688 348.398438 147.804688 347.28125 146.234375 C 347.316406 146.214844 347.359375 146.226562 347.390625 146.199219 L 363.667969 134.5 C 364.222656 134.097656 364.351562 133.320312 363.957031 132.765625 C 363.546875 132.203125 362.769531 132.078125 362.222656 132.480469 L 345.945312 144.183594 C 345.890625 144.21875 345.894531 144.289062 345.851562 144.332031 C 344.679688 142.816406 343.4375 141.355469 342.125 139.964844 C 342.210938 139.914062 342.3125 139.929688 342.386719 139.859375 L 379.6875 105.03125 C 380.191406 104.5625 380.214844 103.777344 379.746094 103.277344 C 379.28125 102.769531 378.496094 102.753906 377.988281 103.214844 L 340.691406 138.046875 C 340.617188 138.117188 340.625 138.222656 340.574219 138.304688 C 339.234375 136.980469 337.839844 135.714844 336.382812 134.523438 L 349.210938 119.316406 C 349.652344 118.792969 349.585938 118.007812 349.0625 117.566406 C 348.542969 117.128906 347.757812 117.191406 347.308594 117.714844 L 334.386719 133.035156 C 332.972656 131.96875 331.519531 130.964844 330.011719 130.027344 L 358.820312 88.414062 C 359.214844 87.847656 359.074219 87.074219 358.507812 86.683594 C 357.941406 86.304688 357.167969 86.4375 356.78125 87 L 327.886719 128.730469 C 326.503906 127.945312 325.078125 127.234375 323.628906 126.558594 L 331.777344 108.667969 C 332.0625 108.046875 331.785156 107.304688 331.160156 107.023438 C 330.550781 106.738281 329.804688 107.011719 329.515625 107.636719 L 321.378906 125.511719 C 319.976562 124.925781 318.535156 124.414062 317.085938 123.9375 L 333.476562 75.941406 C 333.699219 75.292969 333.355469 74.585938 332.703125 74.367188 C 332.035156 74.140625 331.347656 74.492188 331.128906 75.136719 L 314.707031 123.226562 C 312.828125 122.695312 310.910156 122.25 308.960938 121.902344 L 311.058594 102.4375 C 311.132812 101.753906 310.636719 101.140625 309.949219 101.070312 C 309.261719 100.992188 308.660156 101.488281 308.585938 102.171875 L 306.5 121.53125 C 304.25 121.222656 301.964844 121.027344 299.640625 120.984375 L 299.640625 70.496094 C 299.640625 69.8125 299.085938 69.253906 298.398438 69.253906 C 297.714844 69.253906 297.160156 69.8125 297.160156 70.496094 L 297.160156 120.984375 C 295.238281 121.023438 293.328125 121.136719 291.457031 121.355469 L 288.816406 101.582031 C 288.722656 100.902344 288.074219 100.398438 287.421875 100.519531 C 286.738281 100.609375 286.261719 101.234375 286.359375 101.914062 L 289.003906 121.734375 C 287.140625 122.03125 285.308594 122.40625 283.511719 122.871094 L 268.351562 74.476562 C 268.140625 73.820312 267.457031 73.46875 266.796875 73.664062 C 266.140625 73.871094 265.777344 74.566406 265.980469 75.21875 L 281.105469 123.488281 C 279.0625 124.105469 277.0625 124.804688 275.113281 125.625 C 275.1875 125.363281 275.222656 125.082031 275.109375 124.808594 L 267.34375 106.320312 C 267.078125 105.691406 266.351562 105.386719 265.71875 105.65625 C 265.089844 105.925781 264.785156 106.648438 265.054688 107.28125 L 272.820312 125.769531 C 272.949219 126.082031 273.210938 126.277344 273.503906 126.394531 C 271.378906 127.371094 269.335938 128.46875 267.351562 129.675781 C 267.339844 129.644531 267.351562 129.605469 267.339844 129.574219 L 240.039062 86.453125 C 239.667969 85.867188 238.898438 85.707031 238.328125 86.0625 C 237.746094 86.433594 237.578125 87.203125 237.941406 87.777344 L 265.238281 130.902344 C 265.246094 130.917969 265.261719 130.921875 265.273438 130.9375 C 263.34375 132.21875 261.503906 133.609375 259.738281 135.101562 C 259.691406 134.960938 259.707031 134.800781 259.597656 134.683594 L 246.3125 119.667969 C 245.855469 119.152344 245.070312 119.105469 244.558594 119.5625 C 244.042969 120.015625 243.996094 120.804688 244.453125 121.316406 L 257.738281 136.335938 C 257.851562 136.46875 258.027344 136.460938 258.171875 136.535156 C 256.449219 138.101562 254.808594 139.75 253.273438 141.503906 C 253.203125 141.386719 253.199219 141.238281 253.089844 141.140625 L 214.285156 108.011719 C 213.769531 107.5625 212.984375 107.625 212.539062 108.148438 C 212.089844 108.671875 212.15625 109.457031 212.675781 109.898438 L 251.480469 143.03125 C 251.582031 143.121094 251.710938 143.109375 251.828125 143.160156 C 250.527344 144.761719 249.320312 146.4375 248.1875 148.171875 L 231.246094 137.449219 C 230.667969 137.097656 229.90625 137.257812 229.53125 137.839844 C 229.164062 138.417969 229.339844 139.183594 229.917969 139.550781 L 246.863281 150.273438 C 246.875 150.28125 246.894531 150.28125 246.90625 150.285156 C 246.242188 151.398438 245.601562 152.519531 245.007812 153.679688 C 244.945312 153.644531 244.921875 153.570312 244.855469 153.542969 L 196.65625 136.820312 C 196.011719 136.601562 195.308594 136.9375 195.078125 137.585938 C 194.855469 138.230469 195.199219 138.941406 195.84375 139.164062 L 243.953125 155.855469 C 243.238281 157.398438 242.597656 158.976562 242.015625 160.585938 C 241.9375 160.546875 241.898438 160.449219 241.808594 160.429688 L 222.367188 155.546875 C 221.691406 155.382812 221.027344 155.785156 220.855469 156.449219 C 220.691406 157.117188 221.09375 157.792969 221.761719 157.960938 L 241.191406 162.847656 C 240.652344 164.554688 240.199219 166.308594 239.8125 168.082031 C 239.683594 167.628906 239.390625 167.242188 238.894531 167.164062 L 188.453125 159.449219 C 187.792969 159.347656 187.144531 159.804688 187.039062 160.484375 C 186.933594 161.160156 187.402344 161.796875 188.078125 161.902344 L 238.503906 169.613281 C 238.570312 169.625 238.628906 169.628906 238.695312 169.628906 C 239.015625 169.628906 239.304688 169.488281 239.527344 169.273438 C 239.230469 170.765625 239.011719 172.285156 238.832031 173.820312 C 238.625 173.617188 238.351562 173.464844 238.035156 173.449219 L 218.007812 172.621094 C 217.296875 172.597656 216.746094 173.125 216.714844 173.8125 C 216.691406 174.496094 217.222656 175.074219 217.90625 175.105469 L 237.933594 175.933594 C 237.949219 175.933594 237.96875 175.933594 237.984375 175.933594 C 238.238281 175.933594 238.441406 175.804688 238.632812 175.671875 C 238.492188 177.292969 238.394531 178.933594 238.386719 180.59375 L 187.976562 180.59375 C 187.292969 180.59375 186.734375 181.152344 186.734375 181.835938 C 186.734375 182.523438 187.292969 183.078125 187.976562 183.078125 L 238.476562 183.078125 C 238.550781 185.199219 238.734375 187.292969 239.023438 189.355469 C 238.96875 189.355469 238.921875 189.308594 238.867188 189.320312 L 219.097656 192.632812 C 218.421875 192.746094 217.964844 193.386719 218.082031 194.0625 C 218.183594 194.671875 218.707031 195.097656 219.300781 195.097656 C 219.371094 195.097656 219.441406 195.09375 219.511719 195.082031 L 239.28125 191.769531 C 239.320312 191.765625 239.339844 191.714844 239.382812 191.703125 C 239.816406 194.097656 240.347656 196.460938 241.054688 198.746094 C 240.835938 198.675781 240.609375 198.597656 240.378906 198.664062 L 191.230469 212.34375 C 190.570312 212.527344 190.183594 213.214844 190.367188 213.875 C 190.519531 214.425781 191.015625 214.785156 191.5625 214.785156 C 191.671875 214.785156 191.78125 214.769531 191.894531 214.738281 L 241.042969 201.058594 C 241.335938 200.976562 241.542969 200.773438 241.703125 200.542969 C 242.304688 202.28125 242.96875 203.980469 243.726562 205.644531 C 243.515625 205.632812 243.296875 205.585938 243.09375 205.691406 L 225.160156 214.648438 C 224.546875 214.957031 224.304688 215.703125 224.605469 216.3125 C 224.824219 216.746094 225.261719 217 225.71875 217 C 225.90625 217 226.09375 216.960938 226.273438 216.871094 L 244.207031 207.910156 C 244.398438 207.8125 244.488281 207.625 244.605469 207.453125 C 245.503906 209.273438 246.484375 211.042969 247.558594 212.75 L 204.621094 239.363281 C 204.042969 239.726562 203.863281 240.492188 204.21875 241.074219 C 204.453125 241.449219 204.859375 241.660156 205.273438 241.660156 C 205.496094 241.660156 205.726562 241.601562 205.929688 241.472656 L 248.878906 214.847656 C 249.824219 216.230469 250.824219 217.566406 251.878906 218.863281 L 236.378906 231.1875 C 235.84375 231.613281 235.753906 232.394531 236.179688 232.933594 C 236.425781 233.242188 236.792969 233.402344 237.15625 233.402344 C 237.429688 233.402344 237.695312 233.3125 237.929688 233.132812 L 253.527344 220.726562 C 254.691406 222.042969 255.90625 223.308594 257.175781 224.511719 C 257.054688 224.566406 256.90625 224.558594 256.800781 224.65625 L 219.503906 259.488281 C 219.003906 259.953125 218.980469 260.738281 219.445312 261.242188 C 219.691406 261.503906 220.023438 261.640625 220.355469 261.640625 C 220.65625 261.640625 220.964844 261.53125 221.199219 261.304688 L 258.492188 226.476562 C 258.652344 226.332031 258.675781 226.128906 258.738281 225.9375 C 260.183594 227.214844 261.675781 228.417969 263.234375 229.550781 C 263.03125 229.625 262.820312 229.671875 262.671875 229.847656 L 249.847656 245.265625 C 249.410156 245.792969 249.480469 246.578125 250.011719 247.015625 C 250.238281 247.210938 250.523438 247.304688 250.804688 247.304688 C 251.164062 247.304688 251.515625 247.148438 251.757812 246.855469 L 264.582031 231.4375 C 264.753906 231.230469 264.785156 230.976562 264.800781 230.722656 C 266.136719 231.628906 267.527344 232.449219 268.933594 233.246094 C 268.878906 233.300781 268.792969 233.300781 268.75 233.367188 L 239.699219 275.328125 C 239.304688 275.894531 239.449219 276.667969 240.011719 277.058594 C 240.222656 277.207031 240.472656 277.273438 240.71875 277.273438 C 241.113281 277.273438 241.5 277.085938 241.742188 276.742188 L 270.792969 234.78125 C 270.898438 234.640625 270.863281 234.46875 270.898438 234.300781 C 272.386719 235.074219 273.898438 235.8125 275.457031 236.457031 C 275.296875 236.578125 275.113281 236.667969 275.023438 236.859375 L 266.691406 255.101562 C 266.410156 255.722656 266.683594 256.460938 267.308594 256.75 C 267.476562 256.824219 267.652344 256.859375 267.824219 256.859375 C 268.296875 256.859375 268.75 256.589844 268.957031 256.132812 L 277.289062 237.894531 C 277.398438 237.644531 277.363281 237.386719 277.316406 237.144531 C 278.953125 237.765625 280.617188 238.316406 282.320312 238.792969 L 266.003906 286.566406 C 265.785156 287.21875 266.125 287.921875 266.777344 288.140625 C 266.910156 288.1875 267.046875 288.210938 267.179688 288.210938 C 267.695312 288.210938 268.175781 287.886719 268.355469 287.371094 L 284.730469 239.414062 C 286.398438 239.804688 288.101562 240.113281 289.820312 240.363281 L 286.511719 260 C 286.398438 260.675781 286.855469 261.316406 287.53125 261.429688 C 287.597656 261.441406 287.667969 261.445312 287.738281 261.445312 C 288.335938 261.445312 288.859375 261.019531 288.960938 260.410156 L 292.273438 240.734375 C 293.882812 240.898438 295.523438 240.949219 297.167969 240.984375 L 297.167969 291.472656 C 297.167969 292.15625 297.726562 292.714844 298.410156 292.714844 C 299.09375 292.714844 299.652344 292.15625 299.652344 291.472656 L 299.652344 240.988281 C 301.316406 240.953125 302.972656 240.898438 304.601562 240.730469 C 304.597656 240.804688 304.53125 240.855469 304.539062 240.933594 L 306.28125 260.914062 C 306.339844 261.558594 306.878906 262.050781 307.519531 262.050781 C 307.550781 262.050781 307.59375 262.050781 307.621094 262.046875 C 308.308594 261.988281 308.808594 261.386719 308.753906 260.699219 L 307.011719 240.71875 C 307 240.585938 306.890625 240.507812 306.84375 240.394531 C 308.476562 240.160156 310.09375 239.886719 311.6875 239.523438 C 311.613281 239.730469 311.523438 239.945312 311.578125 240.179688 Z M 253.945312 219.359375 C 253.898438 219.210938 253.925781 219.046875 253.820312 218.917969 C 253.675781 218.738281 253.464844 218.6875 253.265625 218.609375 C 252.023438 217.117188 250.847656 215.574219 249.75 213.960938 C 249.878906 213.609375 249.902344 213.230469 249.6875 212.886719 C 249.476562 212.546875 249.128906 212.394531 248.753906 212.359375 C 243.296875 203.75 240.03125 193.636719 239.699219 182.785156 C 240 182.558594 240.222656 182.242188 240.222656 181.835938 C 240.222656 181.394531 239.957031 181.074219 239.609375 180.851562 C 239.664062 154.246094 257.476562 131.761719 281.789062 124.582031 C 281.976562 124.695312 282.1875 124.785156 282.414062 124.785156 C 282.539062 124.785156 282.664062 124.769531 282.785156 124.730469 C 283.101562 124.632812 283.332031 124.414062 283.488281 124.144531 C 285.648438 123.578125 287.847656 123.132812 290.097656 122.808594 C 290.148438 122.8125 290.179688 122.859375 290.230469 122.859375 C 290.285156 122.859375 290.339844 122.859375 290.398438 122.847656 C 290.484375 122.835938 290.523438 122.757812 290.597656 122.734375 C 292.84375 122.429688 295.113281 122.242188 297.425781 122.203125 C 297.648438 122.523438 297.96875 122.773438 298.390625 122.773438 C 298.8125 122.773438 299.128906 122.523438 299.355469 122.203125 C 301.820312 122.242188 304.238281 122.464844 306.628906 122.804688 C 306.816406 123.152344 307.109375 123.429688 307.53125 123.472656 C 307.578125 123.480469 307.621094 123.480469 307.660156 123.480469 C 308 123.480469 308.296875 123.320312 308.527344 123.085938 C 310.679688 123.464844 312.796875 123.941406 314.867188 124.542969 C 315.011719 124.730469 315.15625 124.929688 315.394531 125.007812 C 315.527344 125.054688 315.667969 125.074219 315.796875 125.074219 C 315.949219 125.074219 316.089844 124.988281 316.234375 124.933594 C 317.90625 125.472656 319.554688 126.066406 321.164062 126.742188 C 321.261719 127.070312 321.472656 127.363281 321.808594 127.519531 C 321.972656 127.59375 322.148438 127.628906 322.324219 127.628906 C 322.480469 127.628906 322.625 127.558594 322.761719 127.503906 C 324.421875 128.261719 326.039062 129.089844 327.613281 129.996094 C 327.695312 130.25 327.808594 130.5 328.042969 130.664062 C 328.261719 130.8125 328.503906 130.882812 328.753906 130.882812 C 328.820312 130.882812 328.855469 130.800781 328.925781 130.792969 C 330.835938 131.960938 332.679688 133.222656 334.433594 134.59375 C 334.484375 134.648438 334.472656 134.722656 334.527344 134.769531 C 334.613281 134.835938 334.714844 134.828125 334.804688 134.871094 C 340.75 139.582031 345.753906 145.402344 349.519531 152.035156 C 349.421875 152.363281 349.433594 152.71875 349.628906 153.03125 C 349.796875 153.304688 350.070312 153.453125 350.355469 153.535156 C 351.519531 155.742188 352.515625 158.046875 353.398438 160.402344 C 353.378906 160.585938 353.308594 160.765625 353.382812 160.949219 C 353.46875 161.15625 353.617188 161.304688 353.777344 161.441406 C 354.515625 163.53125 355.152344 165.667969 355.652344 167.859375 C 355.539062 168.117188 355.46875 168.40625 355.546875 168.699219 C 355.628906 168.976562 355.796875 169.207031 356.015625 169.363281 C 356.40625 171.328125 356.699219 173.324219 356.890625 175.355469 C 356.679688 175.605469 356.566406 175.929688 356.601562 176.28125 C 356.632812 176.574219 356.78125 176.8125 356.972656 177.007812 C 357.0625 178.324219 357.171875 179.628906 357.171875 180.964844 C 357.171875 181.316406 357.121094 181.652344 357.117188 181.996094 C 356.800781 182.21875 356.550781 182.53125 356.550781 182.960938 C 356.550781 183.347656 356.75 183.65625 357.027344 183.882812 C 356.839844 187.695312 356.296875 191.402344 355.417969 194.988281 C 355.140625 195.175781 354.933594 195.457031 354.882812 195.808594 C 354.847656 196.042969 354.957031 196.246094 355.042969 196.449219 C 353.765625 201.113281 351.957031 205.5625 349.640625 209.691406 C 349.605469 209.75 349.535156 209.769531 349.511719 209.835938 C 349.503906 209.855469 349.519531 209.875 349.515625 209.894531 C 345.53125 216.90625 340.148438 222.992188 333.757812 227.835938 C 333.734375 227.855469 333.699219 227.839844 333.671875 227.863281 C 333.652344 227.875 333.660156 227.902344 333.644531 227.921875 C 331.503906 229.535156 329.277344 231.03125 326.925781 232.347656 C 326.769531 232.375 326.613281 232.339844 326.460938 232.429688 C 326.347656 232.503906 326.324219 232.640625 326.238281 232.746094 C 318.210938 237.089844 309.058594 239.578125 299.347656 239.738281 C 299.125 239.414062 298.808594 239.164062 298.386719 239.164062 C 297.964844 239.164062 297.644531 239.414062 297.421875 239.738281 C 295.425781 239.703125 293.460938 239.574219 291.515625 239.347656 C 291.417969 239.304688 291.363281 239.199219 291.25 239.179688 C 291.136719 239.164062 291.039062 239.246094 290.929688 239.257812 C 288.839844 238.992188 286.789062 238.609375 284.769531 238.125 C 284.632812 237.828125 284.390625 237.585938 284.054688 237.472656 C 283.660156 237.335938 283.292969 237.449219 282.980469 237.667969 C 271.550781 234.570312 261.488281 228.101562 253.945312 219.359375 Z M 253.945312 219.359375 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 310.265625 99.082031 C 310.3125 99.085938 310.359375 99.085938 310.398438 99.085938 C 311.023438 99.085938 311.558594 98.617188 311.632812 97.980469 L 312.792969 87.257812 C 312.867188 86.574219 312.371094 85.960938 311.6875 85.890625 C 310.933594 85.820312 310.394531 86.308594 310.320312 86.992188 L 309.160156 97.714844 C 309.085938 98.398438 309.582031 99.007812 310.265625 99.082031 Z M 310.265625 99.082031 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 332.085938 105.238281 C 332.25 105.3125 332.421875 105.347656 332.601562 105.347656 C 333.074219 105.347656 333.523438 105.078125 333.734375 104.621094 L 338.203125 94.804688 C 338.492188 94.183594 338.210938 93.441406 337.585938 93.160156 C 336.980469 92.882812 336.226562 93.148438 335.941406 93.777344 L 331.472656 103.59375 C 331.183594 104.214844 331.457031 104.957031 332.085938 105.238281 Z M 332.085938 105.238281 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 357.238281 106.097656 L 350.289062 114.339844 C 349.847656 114.863281 349.917969 115.648438 350.4375 116.089844 C 350.671875 116.289062 350.953125 116.382812 351.238281 116.382812 C 351.589844 116.382812 351.941406 116.234375 352.1875 115.941406 L 359.132812 107.699219 C 359.574219 107.175781 359.507812 106.390625 358.984375 105.949219 C 358.464844 105.511719 357.683594 105.582031 357.238281 106.097656 Z M 357.238281 106.097656 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 374.6875 123.648438 L 365.925781 129.941406 C 365.371094 130.34375 365.242188 131.121094 365.640625 131.675781 C 365.882812 132.015625 366.265625 132.195312 366.648438 132.195312 C 366.902344 132.195312 367.152344 132.121094 367.371094 131.960938 L 376.132812 125.664062 C 376.6875 125.261719 376.816406 124.488281 376.421875 123.929688 C 376.011719 123.371094 375.238281 123.246094 374.6875 123.648438 Z M 374.6875 123.648438 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 377.011719 150.5625 C 376.375 150.8125 376.058594 151.53125 376.300781 152.167969 C 376.496094 152.660156 376.964844 152.964844 377.457031 152.964844 C 377.605469 152.964844 377.761719 152.9375 377.910156 152.878906 L 387.957031 148.972656 C 388.59375 148.726562 388.910156 148.003906 388.667969 147.367188 C 388.414062 146.726562 387.703125 146.40625 387.058594 146.65625 Z M 377.011719 150.5625 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 382.117188 172.371094 C 381.4375 172.445312 380.945312 173.054688 381.019531 173.738281 C 381.089844 174.375 381.625 174.84375 382.25 174.84375 C 382.296875 174.84375 382.339844 174.84375 382.382812 174.839844 L 393.101562 173.671875 C 393.78125 173.597656 394.273438 172.988281 394.199219 172.304688 C 394.125 171.621094 393.546875 171.125 392.832031 171.203125 Z M 382.117188 172.371094 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 382.433594 189.875 C 381.777344 189.785156 381.152344 190.34375 381.109375 191.023438 C 381.054688 191.710938 381.574219 192.300781 382.253906 192.355469 L 393.007812 193.136719 C 393.035156 193.136719 393.066406 193.136719 393.097656 193.136719 C 393.742188 193.136719 394.289062 192.632812 394.332031 191.984375 C 394.386719 191.296875 393.871094 190.707031 393.183594 190.652344 Z M 382.433594 189.875 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 378.363281 208.667969 C 377.703125 208.484375 377.015625 208.867188 376.828125 209.523438 C 376.640625 210.183594 377.019531 210.867188 377.683594 211.058594 L 388.050781 214 C 388.160156 214.027344 388.277344 214.042969 388.386719 214.042969 C 388.929688 214.042969 389.425781 213.6875 389.582031 213.140625 C 389.769531 212.476562 389.386719 211.792969 388.726562 211.605469 Z M 378.363281 208.667969 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 366.4375 229.132812 C 366.070312 229.714844 366.246094 230.480469 366.820312 230.847656 L 375.929688 236.617188 C 376.136719 236.746094 376.367188 236.808594 376.59375 236.808594 C 377.007812 236.808594 377.410156 236.605469 377.640625 236.234375 C 378.007812 235.652344 377.835938 234.886719 377.257812 234.519531 L 368.152344 228.75 C 367.570312 228.386719 366.796875 228.550781 366.4375 229.132812 Z M 366.4375 229.132812 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 349.390625 246.757812 C 348.871094 247.199219 348.800781 247.984375 349.242188 248.507812 L 356.175781 256.769531 C 356.421875 257.0625 356.769531 257.210938 357.121094 257.210938 C 357.40625 257.210938 357.6875 257.117188 357.921875 256.917969 C 358.445312 256.476562 358.511719 255.691406 358.070312 255.167969 L 351.136719 246.90625 C 350.691406 246.378906 349.90625 246.308594 349.390625 246.757812 Z M 349.390625 246.757812 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 329.378906 258.730469 C 328.753906 259.011719 328.46875 259.746094 328.746094 260.371094 L 333.113281 270.234375 C 333.316406 270.695312 333.773438 270.976562 334.25 270.976562 C 334.417969 270.976562 334.585938 270.941406 334.757812 270.871094 C 335.382812 270.59375 335.664062 269.855469 335.386719 269.230469 L 331.023438 259.367188 C 330.742188 258.738281 330.003906 258.453125 329.378906 258.730469 Z M 329.378906 258.730469 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 307.695312 264.058594 C 307.011719 264.117188 306.507812 264.71875 306.5625 265.40625 L 307.503906 276.152344 C 307.5625 276.796875 308.097656 277.285156 308.738281 277.285156 C 308.773438 277.285156 308.8125 277.285156 308.84375 277.28125 C 309.527344 277.21875 310.03125 276.621094 309.976562 275.933594 L 309.039062 265.1875 C 308.976562 264.503906 308.386719 264.027344 307.695312 264.058594 Z M 307.695312 264.058594 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 287.085938 263.398438 C 286.425781 263.289062 285.773438 263.742188 285.65625 264.417969 L 283.863281 275.054688 C 283.75 275.730469 284.207031 276.371094 284.882812 276.484375 C 284.953125 276.496094 285.023438 276.5 285.089844 276.5 C 285.6875 276.5 286.214844 276.074219 286.3125 275.464844 L 288.105469 264.828125 C 288.21875 264.152344 287.761719 263.511719 287.085938 263.398438 Z M 287.085938 263.398438 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 262.507812 270 L 266.984375 260.1875 C 267.269531 259.566406 266.996094 258.828125 266.371094 258.539062 C 265.753906 258.253906 265.007812 258.527344 264.722656 259.15625 L 260.242188 268.96875 C 259.957031 269.589844 260.230469 270.328125 260.855469 270.617188 C 261.027344 270.691406 261.199219 270.726562 261.375 270.726562 C 261.851562 270.726562 262.296875 270.457031 262.507812 270 Z M 262.507812 270 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 241.914062 258.546875 L 248.804688 250.253906 C 249.242188 249.730469 249.171875 248.945312 248.640625 248.507812 C 248.125 248.074219 247.339844 248.140625 246.894531 248.671875 L 240 256.964844 C 239.5625 257.488281 239.632812 258.273438 240.164062 258.710938 C 240.394531 258.90625 240.675781 259 240.957031 259 C 241.3125 258.996094 241.664062 258.839844 241.914062 258.546875 Z M 241.914062 258.546875 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 225.90625 242.578125 L 234.347656 235.867188 C 234.886719 235.4375 234.976562 234.660156 234.546875 234.117188 C 234.125 233.582031 233.347656 233.496094 232.800781 233.917969 L 224.359375 240.632812 C 223.820312 241.058594 223.730469 241.839844 224.160156 242.378906 C 224.402344 242.6875 224.769531 242.847656 225.132812 242.847656 C 225.40625 242.847656 225.679688 242.757812 225.90625 242.578125 Z M 225.90625 242.578125 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 212.007812 223.746094 C 212.195312 223.746094 212.382812 223.707031 212.5625 223.617188 L 222.207031 218.796875 C 222.824219 218.492188 223.066406 217.746094 222.761719 217.132812 C 222.457031 216.523438 221.714844 216.265625 221.101562 216.578125 L 211.457031 221.398438 C 210.839844 221.707031 210.597656 222.449219 210.898438 223.0625 C 211.113281 223.492188 211.550781 223.746094 212.007812 223.746094 Z M 212.007812 223.746094 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 204.429688 197.515625 L 215.0625 195.734375 C 215.738281 195.621094 216.195312 194.980469 216.078125 194.304688 C 215.964844 193.628906 215.320312 193.160156 214.648438 193.285156 L 204.015625 195.066406 C 203.339844 195.183594 202.882812 195.824219 203 196.5 C 203.101562 197.105469 203.625 197.53125 204.21875 197.53125 C 204.289062 197.539062 204.359375 197.53125 204.429688 197.515625 Z M 204.429688 197.515625 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 213.421875 174.820312 C 213.4375 174.820312 213.457031 174.820312 213.472656 174.820312 C 214.132812 174.820312 214.683594 174.296875 214.714844 173.628906 C 214.738281 172.941406 214.207031 172.367188 213.523438 172.335938 L 202.75 171.890625 C 202.070312 171.824219 201.488281 172.394531 201.460938 173.082031 C 201.433594 173.765625 201.964844 174.34375 202.652344 174.375 Z M 213.421875 174.820312 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 217.421875 156.769531 C 217.523438 156.792969 217.625 156.804688 217.722656 156.804688 C 218.277344 156.804688 218.785156 156.425781 218.929688 155.863281 C 219.09375 155.199219 218.691406 154.523438 218.027344 154.355469 L 207.574219 151.726562 C 206.898438 151.5625 206.230469 151.964844 206.0625 152.628906 C 205.898438 153.296875 206.300781 153.972656 206.964844 154.140625 Z M 217.421875 156.769531 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 226.835938 137.257812 C 227.246094 137.257812 227.648438 137.054688 227.882812 136.679688 C 228.25 136.097656 228.078125 135.335938 227.496094 134.964844 L 218.382812 129.199219 C 217.808594 128.839844 217.039062 129 216.671875 129.585938 C 216.304688 130.167969 216.476562 130.933594 217.058594 131.300781 L 226.171875 137.066406 C 226.378906 137.191406 226.605469 137.257812 226.835938 137.257812 Z M 226.835938 137.257812 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 241.550781 117.882812 C 241.792969 118.164062 242.136719 118.300781 242.476562 118.300781 C 242.769531 118.300781 243.0625 118.195312 243.300781 117.988281 C 243.820312 117.535156 243.863281 116.746094 243.40625 116.234375 L 236.265625 108.160156 C 235.808594 107.636719 235.023438 107.59375 234.511719 108.054688 C 233.996094 108.507812 233.953125 109.296875 234.410156 109.808594 Z M 241.550781 117.882812 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 287.085938 98.519531 C 287.140625 98.519531 287.195312 98.519531 287.257812 98.511719 C 287.9375 98.421875 288.414062 97.796875 288.320312 97.113281 L 286.890625 86.425781 C 286.800781 85.746094 286.164062 85.234375 285.492188 85.363281 C 284.8125 85.453125 284.335938 86.078125 284.429688 86.761719 L 285.859375 97.449219 C 285.941406 98.0625 286.476562 98.519531 287.085938 98.519531 Z M 287.085938 98.519531 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 263.398438 103.101562 C 263.597656 103.578125 264.058594 103.863281 264.542969 103.863281 C 264.699219 103.863281 264.863281 103.832031 265.023438 103.761719 C 265.65625 103.496094 265.957031 102.769531 265.6875 102.132812 L 261.507812 92.191406 C 261.246094 91.558594 260.515625 91.265625 259.882812 91.523438 C 259.253906 91.792969 258.949219 92.519531 259.21875 93.15625 Z M 263.398438 103.101562 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 451.59375 338.515625 C 460.355469 332.234375 468.875 325.65625 476.917969 318.441406 L 476.835938 318.339844 C 467.875 324.363281 459.410156 331.023438 451.179688 337.972656 C 447.101562 341.507812 442.730469 344.65625 438.320312 347.761719 C 434.015625 350.996094 429.84375 354.40625 425.851562 358.042969 L 425.929688 358.140625 C 430.433594 355.164062 434.761719 351.953125 438.957031 348.570312 C 443.042969 345.070312 447.171875 341.601562 451.59375 338.515625 Z M 451.59375 338.515625 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#id1)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 498.464844 244.359375 C 498.03125 244.304688 497.550781 245.148438 497.199219 245.878906 C 495.257812 246.050781 494.234375 247.34375 493.117188 248.324219 C 491.234375 250.296875 489.707031 252.511719 488.3125 254.800781 C 488.992188 251.585938 489.640625 248.367188 490.214844 245.128906 C 490.675781 242.542969 491.085938 239.949219 491.492188 237.363281 C 493.394531 234.449219 493.285156 220.660156 492.121094 220.507812 C 491.921875 220.484375 491.617188 221.117188 491.144531 222.183594 C 490.746094 222.023438 490.316406 221.953125 490.007812 222.09375 C 488.953125 222.4375 488.269531 223.078125 487.613281 223.710938 C 486.316406 224.996094 485.257812 226.429688 484.226562 227.871094 C 482.195312 230.777344 480.367188 233.804688 478.734375 236.945312 C 472.5 249.695312 469.777344 263.6875 465.023438 276.878906 C 462.546875 283.429688 459.621094 289.816406 456.160156 295.917969 C 456.105469 296.007812 456.050781 296.09375 455.996094 296.175781 C 458.191406 290.273438 459.628906 284.074219 460.113281 277.761719 C 460.890625 270.519531 459.4375 263.257812 458.144531 256.246094 C 457.503906 252.945312 456.917969 249.628906 456.21875 246.332031 C 458.28125 243.550781 451.839844 228.6875 450.457031 229.039062 C 450.144531 229.117188 449.960938 230.03125 449.636719 231.867188 C 449.628906 231.921875 449.609375 232.054688 449.59375 232.132812 C 449.148438 232.1875 448.714844 232.3125 448.410156 232.535156 C 446.722656 233.644531 445.714844 235.230469 444.792969 236.808594 C 443.0625 240 441.792969 243.648438 442.257812 247.359375 C 446.882812 261.1875 445.40625 275.96875 442.398438 289.835938 C 440.574219 296.722656 437.621094 303.296875 433.484375 309.113281 C 430.316406 313.53125 426.515625 317.472656 422.324219 320.964844 C 425.351562 316.976562 427.808594 312.480469 429.167969 307.585938 C 429.882812 304.980469 430.300781 302.277344 430.304688 299.550781 C 430.410156 296.664062 429.183594 294.167969 428.464844 291.621094 L 423.222656 276.5 C 422.792969 275.261719 422.304688 274.046875 421.855469 272.820312 C 421.9375 270.074219 417.207031 261.890625 416.328125 262.230469 C 416.117188 262.308594 416.046875 262.929688 415.964844 264.128906 C 415.550781 264.328125 415.191406 264.589844 414.917969 264.886719 C 413.09375 267.058594 412.394531 269.769531 412 272.421875 C 411.664062 275.070312 411.851562 277.910156 413.050781 280.351562 C 414.113281 282.796875 414.886719 285.320312 415.632812 287.882812 C 416.371094 290.433594 417.050781 293 417.214844 295.609375 C 417.382812 298.21875 417.089844 300.832031 415.972656 303.152344 C 414.875 305.527344 413.5625 307.871094 412.355469 310.246094 C 409.980469 315.03125 407.667969 319.84375 405.476562 324.703125 L 405.585938 324.757812 C 408.191406 320.097656 410.625 315.359375 413.105469 310.648438 C 414.371094 308.300781 415.730469 306.035156 416.941406 303.605469 C 418.25 301.121094 418.367188 298.207031 418.144531 295.535156 C 417.890625 292.8125 417.125 290.214844 416.308594 287.671875 C 415.488281 285.136719 414.617188 282.582031 413.476562 280.164062 C 412.171875 277.8125 412.082031 275.089844 412.484375 272.484375 C 412.90625 269.925781 413.71875 267.253906 415.402344 265.359375 C 415.5625 265.191406 415.753906 265.058594 415.941406 264.9375 C 415.941406 265.15625 415.917969 265.390625 415.929688 265.597656 C 415.949219 266.03125 416.003906 267.195312 416.382812 268.492188 C 416.773438 269.835938 417.339844 271.769531 419.097656 272.898438 C 419.328125 273.042969 420.320312 273.667969 421.054688 273.71875 L 422.15625 276.882812 L 427.316406 292.007812 C 428.0625 294.542969 429.140625 297.066406 429.125 299.570312 C 429.207031 302.179688 428.902344 304.800781 428.300781 307.359375 C 427.089844 312.339844 424.734375 317 421.882812 321.3125 C 421.140625 321.925781 420.371094 322.511719 419.605469 323.097656 C 416.480469 324.273438 413.300781 325.261719 410 325.835938 C 404.179688 326.898438 398.242188 327.445312 392.328125 328.101562 C 386.417969 328.722656 380.484375 329.054688 374.535156 329.183594 C 371.570312 329.289062 368.554688 329.316406 365.621094 330.007812 C 362.699219 330.71875 359.921875 331.925781 357.390625 333.535156 C 352.269531 336.746094 348.453125 341.601562 345.292969 346.640625 C 342.144531 351.722656 339.398438 357.027344 336.855469 362.425781 C 331.722656 373.207031 327.765625 384.515625 324.546875 395.992188 C 321.285156 407.464844 318.804688 419.152344 317.046875 430.933594 L 317.167969 430.953125 C 321.511719 407.554688 327.875 384.46875 337.710938 362.820312 C 340.171875 357.421875 342.855469 352.097656 345.898438 347.015625 C 348.964844 341.976562 352.652344 337.160156 357.640625 333.933594 C 360.113281 332.332031 362.828125 331.042969 365.703125 330.390625 C 368.589844 329.746094 371.578125 329.738281 374.542969 329.671875 C 380.492188 329.605469 386.457031 329.332031 392.390625 328.777344 C 398.316406 328.210938 404.253906 327.761719 410.164062 326.773438 C 416.101562 325.847656 421.789062 323.636719 427.175781 321.128906 C 432.5625 318.640625 438.011719 316.089844 443.902344 316.046875 C 446.796875 315.996094 449.796875 316.253906 452.542969 317.050781 C 452.886719 317.148438 453.242188 317.273438 453.578125 317.425781 C 452.703125 317.679688 451.824219 318.035156 450.621094 318.527344 C 444.683594 320.957031 443.589844 321.148438 443.246094 322.335938 C 442.964844 323.320312 443.273438 324.722656 444.15625 325.402344 C 444.199219 325.4375 444.261719 325.445312 444.304688 325.476562 C 436.175781 329.441406 427.816406 333.082031 419.257812 335.992188 C 407.925781 339.652344 396.875 344.289062 386.351562 349.859375 L 386.410156 349.96875 C 397.125 344.773438 408.171875 340.339844 419.539062 336.839844 C 428.730469 333.882812 437.585938 330.152344 446.242188 325.875 C 451.027344 325.621094 459.8125 319.113281 459.160156 317.480469 C 458.878906 316.796875 456.847656 316.949219 455.597656 317.046875 C 455.492188 317.050781 455.410156 317.074219 455.304688 317.085938 C 455.234375 317.023438 455.171875 316.945312 455.097656 316.902344 C 454.382812 316.398438 453.636719 316.136719 452.894531 315.898438 C 449.917969 315.046875 446.914062 314.808594 443.871094 314.863281 C 437.710938 314.929688 432.042969 317.613281 426.710938 320.085938 C 424.65625 321.035156 422.574219 321.917969 420.472656 322.742188 C 431.574219 315.050781 440.300781 303.425781 443.308594 290.054688 C 446.042969 275.972656 447.042969 261.097656 442.933594 247.28125 C 442.570312 243.777344 443.875 240.296875 445.609375 237.277344 C 446.503906 235.800781 447.582031 234.300781 448.953125 233.472656 C 449.121094 233.382812 449.269531 233.375 449.433594 233.332031 C 449.421875 233.480469 449.394531 233.621094 449.390625 233.769531 C 449.3125 235.511719 449.851562 236.78125 450.320312 238.0625 C 452.15625 243.101562 451.308594 244.71875 453.113281 245.988281 C 453.535156 246.285156 454.367188 246.722656 455.105469 246.789062 C 455.765625 249.996094 456.335938 253.246094 456.945312 256.457031 C 458.128906 263.546875 459.769531 270.539062 459.203125 277.699219 C 458.867188 284.269531 457.488281 290.769531 455.429688 297.054688 C 452.101562 302.714844 448.382812 308.140625 444.40625 313.398438 L 444.503906 313.476562 C 453.65625 302.804688 461.289062 290.585938 465.902344 277.191406 C 470.355469 263.832031 472.691406 249.699219 479.324219 237.257812 C 481.019531 234.195312 482.914062 231.234375 484.992188 228.421875 C 486.039062 227.035156 487.125 225.652344 488.363281 224.488281 C 488.96875 223.917969 489.664062 223.363281 490.285156 223.171875 C 490.464844 223.101562 490.582031 223.199219 490.707031 223.253906 C 490.082031 224.804688 489.679688 226.257812 489.28125 228.210938 C 488.09375 234.058594 488.46875 235.121094 488.71875 235.683594 C 488.980469 236.253906 489.585938 237.3125 490.230469 237.734375 C 489.847656 240.125 489.46875 242.515625 489.035156 244.894531 C 488.203125 249.441406 487.25 253.957031 486.320312 258.484375 C 485.367188 260.464844 484.53125 262.511719 484.019531 264.65625 C 483.273438 267.714844 482.835938 270.78125 482.261719 273.8125 C 481.019531 279.839844 479.792969 285.96875 477.972656 291.824219 C 476.207031 297.710938 472.402344 302.855469 467.300781 306.3125 C 462.246094 309.832031 456.359375 312.011719 450.34375 313.421875 L 450.367188 313.542969 C 456.421875 312.285156 462.449219 310.328125 467.648438 306.8125 C 472.890625 303.394531 476.929688 298.105469 478.824219 292.113281 C 480.148438 288.074219 481.148438 283.984375 482.085938 279.878906 C 484.011719 273.023438 485.777344 266.121094 487.339844 259.167969 C 487.761719 258.28125 488.15625 257.386719 488.644531 256.527344 C 490.171875 253.882812 491.898438 251.3125 493.984375 249.132812 C 494.785156 248.324219 495.792969 247.421875 496.699219 247.117188 C 496.230469 248.492188 496.273438 249.703125 496.199219 251.785156 C 496.03125 256.757812 495.34375 257.734375 496.328125 259.503906 C 496.433594 259.6875 497.109375 260.863281 497.824219 261.277344 C 497.546875 263.78125 497.253906 266.285156 497.023438 268.777344 C 495.667969 281.03125 494.042969 293.5 488.421875 304.578125 C 487.042969 307.328125 485.585938 310.089844 483.785156 312.554688 C 481.882812 314.917969 479.464844 316.964844 477.648438 319.488281 L 471.773438 326.714844 C 469.78125 329.09375 467.808594 331.488281 466.105469 334.09375 C 462.53125 339.175781 459.683594 344.746094 456.847656 350.226562 C 454.0625 355.757812 449.6875 360.234375 444.519531 363.578125 C 434.3125 370.683594 421.910156 373.066406 409.851562 375.570312 C 403.832031 376.84375 397.558594 377.558594 391.769531 379.972656 C 385.964844 382.226562 380.515625 385.25 375.195312 388.40625 L 375.253906 388.511719 C 380.660156 385.492188 386.21875 382.726562 391.992188 380.558594 C 394.367188 379.601562 396.832031 378.964844 399.320312 378.421875 C 394.636719 380.089844 390.207031 382.503906 386.242188 385.523438 C 381.363281 389.554688 377.035156 394.167969 373.425781 399.335938 C 369.804688 404.496094 367.085938 410.367188 365.753906 416.578125 C 364.402344 422.773438 364.257812 429.222656 365.332031 435.414062 L 365.449219 435.398438 C 364.691406 422.902344 367.488281 410.359375 373.992188 399.710938 C 375.609375 397.050781 377.527344 394.5625 379.671875 392.300781 C 381.871094 390.085938 384.324219 388.136719 386.859375 386.347656 C 391.601562 382.964844 396.710938 380.128906 402.128906 377.835938 C 404.742188 377.351562 407.386719 376.921875 410.011719 376.402344 C 416.109375 375.261719 422.179688 373.996094 428.179688 372.34375 C 434.230469 370.707031 439.871094 367.820312 445.046875 364.351562 C 450.246094 360.917969 454.742188 356.199219 457.480469 350.558594 C 460.265625 345.003906 463 339.472656 466.492188 334.351562 C 468.171875 331.753906 470.054688 329.292969 472.074219 326.953125 L 478.003906 319.8125 C 479.847656 317.304688 482.234375 315.351562 484.242188 312.90625 C 486.125 310.382812 487.59375 307.644531 489.023438 304.882812 C 494.832031 293.765625 496.796875 281.171875 498.144531 268.902344 C 498.398438 266.183594 498.726562 263.488281 499.03125 260.78125 C 500.6875 257.734375 500.109375 244.566406 498.464844 244.359375 Z M 498.464844 244.359375 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#id2)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 263.039062 362.433594 C 260.496094 357.039062 257.75 351.730469 254.601562 346.648438 C 251.441406 341.609375 247.628906 336.753906 242.503906 333.546875 C 239.96875 331.9375 237.195312 330.730469 234.273438 330.019531 C 231.339844 329.328125 228.324219 329.292969 225.359375 329.195312 C 219.410156 329.0625 213.476562 328.726562 207.566406 328.109375 C 201.65625 327.460938 195.71875 326.914062 189.898438 325.84375 C 186.597656 325.273438 183.417969 324.289062 180.292969 323.105469 C 179.523438 322.519531 178.761719 321.9375 178.015625 321.324219 C 175.164062 317.011719 172.8125 312.355469 171.597656 307.371094 C 170.992188 304.8125 170.683594 302.1875 170.773438 299.578125 C 170.761719 297.070312 171.835938 294.550781 172.578125 292.015625 L 177.742188 276.894531 L 178.839844 273.726562 C 179.570312 273.683594 180.574219 273.058594 180.796875 272.90625 C 182.554688 271.78125 183.117188 269.847656 183.511719 268.5 C 183.890625 267.203125 183.945312 266.042969 183.964844 265.609375 C 183.972656 265.398438 183.953125 265.167969 183.953125 264.949219 C 184.144531 265.070312 184.332031 265.203125 184.496094 265.371094 C 186.179688 267.261719 186.988281 269.9375 187.410156 272.496094 C 187.8125 275.09375 187.722656 277.820312 186.417969 280.171875 C 185.277344 282.585938 184.402344 285.144531 183.585938 287.679688 C 182.769531 290.21875 182.003906 292.824219 181.75 295.546875 C 181.53125 298.21875 181.648438 301.128906 182.953125 303.613281 C 184.164062 306.050781 185.523438 308.316406 186.789062 310.660156 C 189.269531 315.371094 191.695312 320.109375 194.308594 324.765625 L 194.417969 324.710938 C 192.226562 319.847656 189.910156 315.042969 187.539062 310.257812 C 186.339844 307.882812 185.015625 305.53125 183.917969 303.164062 C 182.808594 300.84375 182.515625 298.226562 182.683594 295.621094 C 182.847656 293.011719 183.527344 290.441406 184.261719 287.894531 C 185.007812 285.328125 185.78125 282.804688 186.84375 280.359375 C 188.042969 277.925781 188.234375 275.078125 187.886719 272.429688 C 187.5 269.777344 186.800781 267.070312 184.976562 264.898438 C 184.699219 264.601562 184.34375 264.335938 183.929688 264.136719 C 183.839844 262.933594 183.777344 262.3125 183.566406 262.238281 C 182.6875 261.902344 177.957031 270.085938 178.039062 272.828125 C 177.589844 274.054688 177.097656 275.277344 176.667969 276.511719 L 171.429688 291.628906 C 170.710938 294.179688 169.488281 296.671875 169.589844 299.558594 C 169.597656 302.28125 170.011719 304.992188 170.726562 307.59375 C 172.082031 312.488281 174.539062 316.984375 177.566406 320.976562 C 173.378906 317.476562 169.574219 313.542969 166.40625 309.125 C 162.269531 303.3125 159.3125 296.734375 157.496094 289.847656 C 154.492188 275.976562 153.015625 261.195312 157.636719 247.367188 C 158.101562 243.65625 156.832031 240.011719 155.105469 236.820312 C 154.183594 235.238281 153.175781 233.648438 151.488281 232.546875 C 151.160156 232.308594 150.6875 232.175781 150.199219 232.132812 C 150.171875 231.945312 150.136719 231.722656 150.117188 231.617188 C 149.769531 229.648438 149.570312 228.667969 149.238281 228.582031 C 147.6875 228.183594 140.253906 245.484375 143.3125 247.492188 C 143.351562 247.519531 143.402344 247.507812 143.441406 247.527344 C 142.851562 250.433594 142.316406 253.355469 141.753906 256.261719 C 140.460938 263.273438 139.007812 270.527344 139.789062 277.777344 C 140.269531 284.09375 141.714844 290.296875 143.914062 296.199219 C 143.859375 296.105469 143.800781 296.023438 143.746094 295.933594 C 140.285156 289.828125 137.359375 283.445312 134.875 276.894531 C 130.128906 263.699219 127.402344 249.707031 121.167969 236.960938 C 119.535156 233.820312 117.707031 230.792969 115.671875 227.886719 C 114.640625 226.441406 113.585938 225.007812 112.285156 223.726562 C 111.628906 223.097656 110.941406 222.449219 109.890625 222.109375 C 109.585938 221.964844 109.152344 222.03125 108.753906 222.191406 C 108.277344 221.128906 107.976562 220.492188 107.777344 220.519531 C 106.613281 220.667969 106.511719 234.460938 108.40625 237.371094 C 108.8125 239.960938 109.214844 242.554688 109.679688 245.136719 C 110.257812 248.371094 110.898438 251.597656 111.582031 254.8125 C 110.183594 252.519531 108.664062 250.300781 106.777344 248.328125 C 105.660156 247.347656 104.636719 246.058594 102.703125 245.882812 C 102.347656 245.152344 101.867188 244.308594 101.433594 244.363281 C 99.792969 244.570312 99.210938 257.738281 100.878906 260.804688 C 101.175781 263.511719 101.507812 266.203125 101.761719 268.929688 C 103.113281 281.195312 105.074219 293.785156 110.886719 304.90625 C 112.316406 307.667969 113.78125 310.40625 115.667969 312.929688 C 117.679688 315.375 120.0625 317.328125 121.90625 319.835938 L 127.828125 326.976562 C 129.855469 329.324219 131.738281 331.777344 133.414062 334.375 C 136.910156 339.492188 139.648438 345.027344 142.433594 350.582031 C 145.164062 356.222656 149.667969 360.9375 154.863281 364.375 C 160.039062 367.851562 165.683594 370.730469 171.726562 372.367188 C 177.726562 374.019531 183.808594 375.292969 189.902344 376.425781 C 192.53125 376.949219 195.171875 377.371094 197.789062 377.863281 C 203.199219 380.152344 208.316406 382.988281 213.058594 386.375 C 215.59375 388.160156 218.046875 390.109375 220.246094 392.324219 C 222.390625 394.589844 224.304688 397.082031 225.925781 399.734375 C 232.425781 410.382812 235.226562 422.921875 234.464844 435.425781 L 234.585938 435.4375 C 235.65625 429.253906 235.515625 422.800781 234.164062 416.601562 C 232.835938 410.390625 230.117188 404.519531 226.496094 399.363281 C 222.882812 394.195312 218.5625 389.574219 213.675781 385.546875 C 209.71875 382.53125 205.289062 380.117188 200.609375 378.449219 C 203.09375 378.988281 205.554688 379.625 207.925781 380.585938 C 213.699219 382.75 219.257812 385.519531 224.664062 388.535156 L 224.730469 388.429688 C 219.402344 385.273438 213.957031 382.25 208.152344 380 C 202.363281 377.582031 196.089844 376.867188 190.074219 375.597656 C 178.011719 373.09375 165.609375 370.707031 155.40625 363.601562 C 150.230469 360.261719 145.855469 355.78125 143.074219 350.25 C 140.238281 344.769531 137.386719 339.199219 133.816406 334.117188 C 132.113281 331.511719 130.144531 329.113281 128.152344 326.738281 L 122.277344 319.515625 C 120.460938 316.988281 118.035156 314.941406 116.140625 312.578125 C 114.335938 310.113281 112.886719 307.351562 111.5 304.601562 C 105.875 293.523438 104.253906 281.054688 102.894531 268.804688 C 102.667969 266.308594 102.375 263.804688 102.09375 261.300781 C 102.8125 260.886719 103.484375 259.710938 103.589844 259.53125 C 104.574219 257.769531 103.894531 256.789062 103.71875 251.816406 C 103.648438 249.734375 103.691406 248.515625 103.21875 247.144531 C 104.125 247.457031 105.132812 248.355469 105.933594 249.164062 C 108.015625 251.34375 109.746094 253.917969 111.273438 256.554688 C 111.765625 257.410156 112.15625 258.304688 112.574219 259.1875 C 114.136719 266.144531 115.90625 273.058594 117.832031 279.917969 C 118.769531 284.019531 119.773438 288.101562 121.09375 292.140625 C 122.988281 298.140625 127.03125 303.425781 132.269531 306.84375 C 137.472656 310.355469 143.5 312.316406 149.550781 313.570312 L 149.570312 313.449219 C 143.5625 312.035156 137.660156 309.855469 132.613281 306.335938 C 127.511719 302.878906 123.707031 297.738281 121.941406 291.847656 C 120.117188 285.992188 118.890625 279.863281 117.652344 273.835938 C 117.074219 270.804688 116.636719 267.742188 115.890625 264.679688 C 115.382812 262.539062 114.546875 260.496094 113.589844 258.511719 C 112.664062 253.988281 111.710938 249.464844 110.878906 244.917969 C 110.449219 242.539062 110.066406 240.148438 109.679688 237.757812 C 110.324219 237.339844 110.925781 236.277344 111.183594 235.707031 C 111.4375 235.140625 111.808594 234.078125 110.621094 228.234375 C 110.226562 226.28125 109.824219 224.832031 109.195312 223.28125 C 109.324219 223.226562 109.433594 223.125 109.613281 223.195312 C 110.234375 223.390625 110.929688 223.941406 111.535156 224.511719 C 112.777344 225.671875 113.859375 227.054688 114.90625 228.449219 C 116.980469 231.253906 118.878906 234.222656 120.574219 237.28125 C 127.203125 249.71875 129.542969 263.851562 133.996094 277.214844 C 138.605469 290.613281 146.242188 302.828125 155.394531 313.503906 L 155.488281 313.421875 C 151.523438 308.171875 147.800781 302.75 144.46875 297.089844 C 142.402344 290.804688 141.035156 284.300781 140.691406 277.726562 C 140.128906 270.566406 141.761719 263.578125 142.949219 256.484375 C 143.511719 253.535156 144.042969 250.558594 144.640625 247.597656 C 145.320312 247.4375 146.003906 247.082031 146.386719 246.8125 C 148.328125 245.449219 147.417969 243.707031 149.386719 238.296875 C 149.886719 236.917969 150.46875 235.554688 150.390625 233.679688 C 150.382812 233.554688 150.363281 233.445312 150.355469 233.320312 C 150.554688 233.371094 150.738281 233.386719 150.949219 233.496094 C 152.316406 234.324219 153.398438 235.828125 154.292969 237.300781 C 156.03125 240.324219 157.332031 243.800781 156.972656 247.304688 C 152.863281 261.128906 153.867188 276 156.597656 290.078125 C 159.601562 303.449219 168.328125 315.074219 179.433594 322.769531 C 177.335938 321.945312 175.253906 321.058594 173.191406 320.109375 C 167.863281 317.632812 162.199219 314.949219 156.03125 314.886719 C 152.992188 314.832031 149.980469 315.074219 147.007812 315.921875 C 146.269531 316.160156 145.519531 316.421875 144.808594 316.925781 C 144.734375 316.964844 144.667969 317.050781 144.597656 317.109375 C 144.5 317.097656 144.414062 317.078125 144.3125 317.070312 C 143.066406 316.976562 141.027344 316.820312 140.75 317.507812 C 140.089844 319.136719 148.886719 325.652344 153.667969 325.898438 C 162.324219 330.171875 171.171875 333.910156 180.363281 336.863281 C 191.734375 340.359375 202.785156 344.800781 213.496094 349.992188 L 213.550781 349.882812 C 203.027344 344.3125 191.984375 339.675781 180.652344 336.015625 C 172.089844 333.109375 163.734375 329.464844 155.605469 325.5 C 155.648438 325.472656 155.707031 325.460938 155.753906 325.425781 C 156.632812 324.746094 156.945312 323.34375 156.660156 322.363281 C 156.320312 321.175781 155.226562 320.980469 149.285156 318.550781 C 148.085938 318.058594 147.207031 317.707031 146.335938 317.453125 C 146.664062 317.296875 147.023438 317.167969 147.371094 317.074219 C 150.117188 316.28125 153.117188 316.019531 156.011719 316.070312 C 161.90625 316.117188 167.359375 318.664062 172.738281 321.152344 C 178.125 323.664062 183.804688 325.875 189.75 326.796875 C 195.660156 327.789062 201.59375 328.238281 207.523438 328.800781 C 213.457031 329.355469 219.421875 329.628906 225.371094 329.695312 C 228.339844 329.765625 231.324219 329.769531 234.210938 330.414062 C 237.085938 331.066406 239.800781 332.359375 242.273438 333.957031 C 247.265625 337.183594 250.957031 342.003906 254.019531 347.039062 C 257.070312 352.125 259.75 357.445312 262.207031 362.847656 C 272.046875 384.496094 278.40625 407.578125 282.753906 430.976562 L 282.875 430.957031 C 281.117188 419.175781 278.636719 407.492188 275.378906 396.019531 C 272.128906 384.523438 268.175781 373.214844 263.039062 362.433594 Z M 263.039062 362.433594 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  }))), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 123.066406 318.347656 L 122.992188 318.445312 C 131.027344 325.660156 139.554688 332.234375 148.3125 338.519531 C 152.738281 341.605469 156.859375 345.070312 160.953125 348.582031 C 165.144531 351.964844 169.46875 355.175781 173.976562 358.152344 L 174.050781 358.050781 C 170.058594 354.414062 165.886719 351.007812 161.585938 347.769531 C 157.179688 344.667969 152.808594 341.515625 148.734375 337.984375 C 140.492188 331.027344 132.023438 324.367188 123.066406 318.347656 Z M 123.066406 318.347656 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 187.652344 80.84375 C 188.855469 82.871094 190.9375 91.21875 190.960938 91.300781 L 191.5625 93.730469 L 192.164062 91.300781 C 192.183594 91.21875 194.265625 82.863281 195.46875 80.84375 C 196.652344 78.851562 201.558594 75.386719 201.605469 75.351562 L 202.328125 74.84375 L 201.605469 74.339844 C 201.554688 74.304688 196.652344 70.839844 195.46875 68.847656 C 194.265625 66.820312 192.1875 58.472656 192.164062 58.386719 L 191.5625 55.964844 L 190.960938 58.386719 C 190.941406 58.472656 188.859375 66.820312 187.652344 68.847656 C 186.472656 70.839844 181.566406 74.304688 181.515625 74.339844 L 180.792969 74.84375 L 181.515625 75.351562 C 181.566406 75.386719 186.46875 78.851562 187.652344 80.84375 Z M 188.722656 69.484375 C 189.601562 68 190.832031 63.714844 191.5625 61.007812 C 192.289062 63.714844 193.523438 68.003906 194.402344 69.484375 C 195.441406 71.226562 198.726562 73.765625 200.1875 74.84375 C 198.726562 75.921875 195.441406 78.460938 194.402344 80.207031 C 193.523438 81.6875 192.292969 85.976562 191.5625 88.683594 C 190.835938 85.976562 189.601562 81.6875 188.722656 80.207031 C 187.683594 78.460938 184.390625 75.921875 182.929688 74.84375 C 184.390625 73.765625 187.683594 71.226562 188.722656 69.484375 Z M 188.722656 69.484375 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#id3)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 294.492188 39.164062 C 295.699219 41.191406 297.773438 49.539062 297.800781 49.625 L 298.398438 52.058594 L 299 49.628906 C 299.019531 49.542969 301.101562 41.191406 302.308594 39.167969 C 303.496094 37.175781 308.390625 33.714844 308.445312 33.679688 L 309.171875 33.171875 L 308.445312 32.664062 C 308.390625 32.628906 303.496094 29.167969 302.308594 27.179688 C 301.101562 25.152344 299.027344 16.804688 299 16.722656 L 298.398438 14.285156 L 297.800781 16.714844 C 297.78125 16.800781 295.699219 25.148438 294.492188 27.175781 C 293.308594 29.167969 288.402344 32.625 288.359375 32.660156 L 287.632812 33.167969 L 288.359375 33.675781 C 288.410156 33.714844 293.308594 37.171875 294.492188 39.164062 Z M 295.558594 27.8125 C 296.4375 26.324219 297.675781 22.042969 298.398438 19.335938 C 299.125 22.042969 300.363281 26.324219 301.242188 27.8125 C 302.277344 29.554688 305.570312 32.09375 307.03125 33.171875 C 305.570312 34.25 302.277344 36.789062 301.242188 38.535156 C 300.363281 40.015625 299.128906 44.300781 298.398438 47.011719 C 297.675781 44.300781 296.4375 40.015625 295.558594 38.535156 C 294.523438 36.789062 291.234375 34.25 289.773438 33.171875 C 291.234375 32.09375 294.523438 29.554688 295.558594 27.8125 Z M 295.558594 27.8125 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  }))), _path30 || (_path30 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"inherit\",\n    d: \"M 412.015625 81.546875 C 413.21875 83.574219 415.292969 91.921875 415.320312 92.007812 L 415.917969 94.4375 L 416.519531 92.007812 C 416.546875 91.921875 418.625 83.574219 419.828125 81.546875 C 421.011719 79.554688 425.917969 76.09375 425.964844 76.058594 L 426.691406 75.550781 L 425.964844 75.042969 C 425.910156 75.007812 421.011719 71.546875 419.828125 69.554688 C 418.625 67.527344 416.546875 59.179688 416.519531 59.09375 L 415.917969 56.664062 L 415.320312 59.09375 C 415.292969 59.179688 413.21875 67.53125 412.015625 69.554688 C 410.835938 71.546875 405.929688 75.007812 405.878906 75.042969 L 405.152344 75.550781 L 405.878906 76.058594 C 405.929688 76.09375 410.835938 79.550781 412.015625 81.546875 Z M 413.085938 70.1875 C 413.96875 68.707031 415.195312 64.421875 415.917969 61.710938 C 416.644531 64.421875 417.882812 68.707031 418.761719 70.1875 C 419.796875 71.933594 423.085938 74.472656 424.550781 75.550781 C 423.085938 76.628906 419.796875 79.167969 418.761719 80.910156 C 417.875 82.390625 416.644531 86.679688 415.917969 89.386719 C 415.195312 86.679688 413.964844 82.398438 413.085938 80.910156 C 412.046875 79.167969 408.757812 76.628906 407.292969 75.550781 C 408.757812 74.472656 412.046875 71.933594 413.085938 70.1875 Z M 413.085938 70.1875 \",\n    fillOpacity: 1,\n    fillRule: \"nonzero\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgOrb);\nexport default __webpack_public_path__ + \"static/media/orb.d5708091.svg\";\nexport { ForwardRef as ReactComponent };","import erc20Abi from \"./abis/erc20.json\";\nimport ownableAbi from \"./abis/ownable.json\";\n\nconst abis = {\n  erc20: erc20Abi,\n  ownable: ownableAbi,\n};\n\nexport default abis;\n","\n// This address points to a dummy ERC-20 contract. Replace it with your own smart contracts.\nconst addresses = {\n  ceaErc20: \"0x51C449b5FD5dee173658546b993Bd1680fC61a02\",\n};\nexport default addresses;\n","\nexport class screenRecord {\n  \n  chunks;\n  blob;\n  url;\n  startRecording;\n  stopRecording;\n  mediaRecorder;\n  \n  constructor() {\n    this.chunks = [];\n    this.blob = null;\n    this.url = null;\n    this.mediaRecorder = null;\n    this.stream = null;\n    this.startRecording.bind(this)\n    this.stopRecording.bind(this)\n  }\n\n  async startRecording(\n    addBlobToIPFS, \n    account, \n    number,\n    mintToken,\n    send,\n    ipfsResultObj,\n    startRandomColorTest,\n    handleStopRecording\n  ) {  ;\n\n    this.setState({\n      ipfsResult: null\n    })\n\n    this.stream = await navigator.mediaDevices.getDisplayMedia({\n      // video: true,\n      preferCurrentTab: true\n    });\n  \n    this.mediaRecorder = new MediaRecorder(this.stream, {\n      mimeType: \"video/webm\"\n    });\n\n    var chunks = [];\n\n    this.mediaRecorder.ondataavailable = function(e) {\n      console.log('e.data', e.data)\n      console.log('chunks', chunks)\n      chunks.push(e.data)\n    }\n\n    window.startTimer();\n\n    console.log('recording');\n\n    console.log('this.mediaRecorder', this.mediaRecorder);\n    // possible callback function.\n  \n    this.mediaRecorder.onstop = function() {\n      var blob = new Blob(chunks, {\n          // type: chunks[0].type\n          type: 'video/webm',\n      })\n      let url = URL.createObjectURL(blob)\n\n      let video = document.querySelector(\"video\")\n      let videoWrapper = document.querySelector('.videoPlayer');\n      video.src = url\n      videoWrapper.style.display = \"\";\n      video.play();\n\n      console.log(blob)\n\n      const result = addBlobToIPFS(blob, account, number, mintToken, send);\n    };\n    \n  \n    //we have to start the recorder manually\n    this.mediaRecorder.start();\n    // start.style.display = \"none\";\n    // stop.style.display = \"\";\n\n    return {\n      mediaRecorder: this.mediaRecorder,\n      stream: this.stream\n    };\n  }\n\n  stopRecording(mediaRecorder, stream) {\n    console.log('mediaRecorder', mediaRecorder)\n    mediaRecorder.stop();\n    stream.getTracks().forEach(function(track) {\n      track.stop();\n    });\n  }\n}\n\n","var _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgEmblem(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 76,\n    height: 76,\n    viewBox: \"0 0 76 76\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M75.9834 37.9466C75.9834 58.6573 59.194 75.4466 38.4834 75.4466C17.7727 75.4466 0.983378 58.6573 0.98338 37.9466C0.983382 17.2359 17.7727 0.446596 38.4834 0.446598C59.1941 0.446599 75.9834 17.2359 75.9834 37.9466Z\",\n    fill: \"white\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M38.4834 74.1073C58.4544 74.1073 74.6441 57.9176 74.6441 37.9466C74.6441 17.9756 58.4544 1.78588 38.4834 1.78588C18.5124 1.78588 2.32267 17.9756 2.32267 37.9466C2.32266 57.9176 18.5124 74.1073 38.4834 74.1073ZM38.4834 75.4466C59.1941 75.4466 75.9834 58.6573 75.9834 37.9466C75.9834 17.2359 59.1941 0.446599 38.4834 0.446598C17.7727 0.446596 0.983382 17.2359 0.98338 37.9466C0.983378 58.6573 17.7727 75.4466 38.4834 75.4466Z\",\n    fill: \"black\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M63.6259 37.9465C63.6259 51.9336 52.2871 63.2723 38.3 63.2723C24.3129 63.2723 12.9741 51.9336 12.9741 37.9465C12.9741 23.9594 24.3129 12.6206 38.3 12.6206C52.2871 12.6206 63.6259 23.9594 63.6259 37.9465Z\",\n    fill: \"black\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M41.8082 43.6886L50.5557 38.3015L41.8082 32.9145L41.8082 43.6886ZM51.2546 39.4365C52.0999 38.9159 52.0999 37.6871 51.2546 37.1666L42.5072 31.7795C41.6191 31.2326 40.4753 31.8715 40.4753 32.9145L40.4753 43.6886C40.4753 44.7315 41.6191 45.3705 42.5072 44.8235L51.2546 39.4365Z\",\n    fill: \"#FFD700\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M45.8743 40.7211L42.1025 38.3015L45.8743 35.8819L45.8743 40.7211ZM41.3827 39.4234C40.5651 38.8989 40.5651 37.7041 41.3827 37.1796L45.1545 34.7599C46.0417 34.1908 47.2072 34.8279 47.2072 35.8819L47.2072 40.7211C47.2072 41.7751 46.0417 42.4121 45.1545 41.843L41.3827 39.4234Z\",\n    fill: \"#FFD700\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M34.7921 43.6882L26.0446 38.3012L34.7921 32.9141L34.7921 43.6882ZM25.3457 39.4361C24.5004 38.9156 24.5004 37.6868 25.3457 37.1662L34.0931 31.7792C34.9812 31.2322 36.125 31.8712 36.125 32.9141L36.125 43.6882C36.125 44.7312 34.9812 45.3701 34.0931 44.8232L25.3457 39.4361Z\",\n    fill: \"#FFD700\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M30.7259 40.7206L34.4977 38.301L30.7259 35.8814L30.7259 40.7206ZM35.2174 39.4229C36.0351 38.8984 36.0351 37.7036 35.2174 37.1791L31.4456 34.7594C30.5585 34.1903 29.393 34.8274 29.393 35.8814L29.393 40.7206C29.393 41.7746 30.5585 42.4117 31.4456 41.8425L35.2174 39.4229Z\",\n    fill: \"#FFD700\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M34.6662 18.7751C26.3987 21.2277 20.3681 28.8827 20.3681 37.9461C20.3681 47.0096 26.3987 54.6645 34.6662 57.1172C32.861 57.6527 30.9492 57.9402 28.9702 57.9402C17.9278 57.9402 8.97612 48.9886 8.97613 37.9461C8.97613 26.9037 17.9278 17.952 28.9702 17.952C30.9492 17.952 32.861 18.2395 34.6662 18.7751Z\",\n    fill: \"#FFD700\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.1289 36.814C11.2901 37.3355 11.2901 38.5564 12.1289 39.0779L21.2677 44.7601C22.1557 45.3122 23.3045 44.6737 23.3045 43.6281L23.3045 32.2638C23.3045 31.2182 22.1557 30.5797 21.2677 31.1318L12.1289 36.814Z\",\n    fill: \"black\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.6394 37.946C19.6394 38.6821 19.0427 39.2789 18.3065 39.2789C17.5703 39.2789 16.9735 38.6821 16.9735 37.946C16.9735 37.2098 17.5703 36.613 18.3065 36.613C19.0427 36.613 19.6394 37.2098 19.6394 37.946Z\",\n    fill: \"#FFD700\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.1691 69.4494C37.6907 70.2882 38.9115 70.2882 39.4331 69.4494L45.1152 60.3106C45.6673 59.4226 45.0288 58.2738 43.9832 58.2738L32.6189 58.2738C31.5734 58.2738 30.9349 59.4226 31.4869 60.3106L37.1691 69.4494Z\",\n    fill: \"black\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M38.3012 61.9393C39.0374 61.9393 39.6341 62.5361 39.6341 63.2723C39.6341 64.0084 39.0374 64.6052 38.3012 64.6052C37.565 64.6052 36.9683 64.0084 36.9683 63.2723C36.9683 62.5361 37.565 61.9393 38.3012 61.9393Z\",\n    fill: \"#FFD700\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.9671 60.6061C41.7033 60.6061 42.3001 61.2029 42.3001 61.939C42.3001 62.6752 41.7033 63.272 40.9671 63.272C40.231 63.272 39.6342 62.6752 39.6342 61.939C39.6342 61.2029 40.231 60.6061 40.9671 60.6061Z\",\n    fill: \"black\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M42.3005 57.1171C44.1057 57.6526 46.0175 57.9401 47.9965 57.9401C59.0389 57.9401 67.9906 48.9885 67.9906 37.946C67.9906 26.9036 59.0389 17.9519 47.9965 17.9519C46.0175 17.9519 44.1057 18.2394 42.3005 18.7749C50.568 21.2276 56.5987 28.8825 56.5987 37.946C56.5987 47.0095 50.568 54.6644 42.3005 57.1171Z\",\n    fill: \"#FFD700\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M64.4731 36.8135C65.3119 37.335 65.3119 38.5559 64.4731 39.0774L55.3343 44.7596C54.4464 45.3117 53.2975 44.6732 53.2975 43.6276L53.2975 32.2633C53.2975 31.2177 54.4464 30.5792 55.3343 31.1313L64.4731 36.8135Z\",\n    fill: \"black\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M59.6298 37.946C59.6298 38.6821 59.033 39.2789 58.2968 39.2789C57.5607 39.2789 56.9639 38.6821 56.9639 37.946C56.9639 37.2098 57.5607 36.613 58.2968 36.613C59.033 36.613 59.6298 37.2098 59.6298 37.946Z\",\n    fill: \"#FFD700\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.1691 6.4437C37.6907 5.60487 38.9115 5.60487 39.4331 6.4437L45.1152 15.5825C45.6673 16.4704 45.0288 17.6193 43.9833 17.6193H32.6189C31.5734 17.6193 30.9349 16.4704 31.4869 15.5825L37.1691 6.4437Z\",\n    fill: \"black\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M38.3012 11.2872C39.0374 11.2872 39.6341 11.884 39.6341 12.6202C39.6341 13.3563 39.0374 13.9531 38.3012 13.9531C37.565 13.9531 36.9683 13.3563 36.9683 12.6202C36.9683 11.884 37.565 11.2872 38.3012 11.2872Z\",\n    fill: \"#FFD700\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgEmblem);\nexport default __webpack_public_path__ + \"static/media/emblem.3acd9834.svg\";\nexport { ForwardRef as ReactComponent };","import $ from 'jquery'\n\n$(() => {\n  let consecutiveColors = [];\n  const el = document.getElementById('box'); // your element\n  const property = 'background-color';       // fading property\n  var seconds = 0;\n  \n  const sameColor = function(color1, color2) {\n      return color1 === color2\n  }\n  \n  const randomNumber = function(limit) {\n      return Math.floor(Math.random() * limit);\n  }\n  var fadeDuration = 5000;\n  // return objet of random RGB values\n  const randomRGBGenerator = function() {\n      return {\n          r: randomNumber(255),\n          g: randomNumber(255),\n          b: randomNumber(255)\n      };\n  }\n  \n  const randomDuration = function() \n  {\n      var min = 1, max = 5;\n      var number = Math.floor(Math.random() * (max - min + 1) + min);\n      return number * 1000;\n  }\n  \n  var timerStatus;\n  var startBtn = document.getElementById(\"start\")\n//   var stopBtn = document.getElementById(\"stop\")\n  \n  startBtn.setAttribute(\"enabled\", \"enabled\");\n//   stopBtn.setAttribute(\"disabled\", \"disabled\");\n  var sec = document.querySelector('.seconds')\n  \n  // $(\"#box\").fadeOut();\n  \n  var box2 = document.querySelector(\"body\")\n  let randomRGBBox2 = randomRGBGenerator();\n  box2.style.backgroundColor = 'rgb('+randomRGBBox2.r+','+randomRGBBox2.g+','+randomRGBBox2.b+')'\n  \n  // function deltaRgb22 (rgb1, rgb2) {\n  //     console.log(rgb1 , rgb2)\n  //     const [ r1, g1, b1 ] = rgb1,\n  //           [ r2, g2, b2 ] = rgb2,\n  //           drp2 = Math.pow(r1 - r2, 2),\n  //           dgp2 = Math.pow(g1 - g2, 2),\n  //           dbp2 = Math.pow(b1 - b2, 2),\n  //           t = (r1 + r2) / 2\n    \n  //     return Math.sqrt(2 * drp2 + 4 * dgp2 + 3 * dbp2 + t * (drp2 - dbp2) / 256)\n  //   }\n  \n  \n    function getRGB(str){\n      var match = str.match(/rgba?\\((\\d{1,3}), ?(\\d{1,3}), ?(\\d{1,3})\\)?(?:, ?(\\d(?:\\.\\d?))\\))?/);\n      return match ? [\n          parseInt(match[1]),\n          parseInt(match[2]),\n          parseInt(match[3])\n        ] : {};\n    }\n  \n  \n  \n  function rgb2lab(rgb){\n      var r = rgb[0] / 255,\n          g = rgb[1] / 255,\n          b = rgb[2] / 255,\n          x, y, z;\n    \n      r = (r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n      g = (g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n      b = (b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n      \n        x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;\n        y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.00000;\n        z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;\n      \n        x = (x > 0.008856) ? Math.pow(x, 1/3) : (7.787 * x) + 16/116;\n        y = (y > 0.008856) ? Math.pow(y, 1/3) : (7.787 * y) + 16/116;\n        z = (z > 0.008856) ? Math.pow(z, 1/3) : (7.787 * z) + 16/116;\n      \n        return [(116 * y) - 16, 500 * (x - y), 200 * (y - z)]\n      }\n    \n    \n    \n    function deltaE(labA, labB){\n        var deltaL = labA[0] - labB[0];\n        var deltaA = labA[1] - labB[1];\n        var deltaB = labA[2] - labB[2];\n        var c1 = Math.sqrt(labA[1] * labA[1] + labA[2] * labA[2]);\n        var c2 = Math.sqrt(labB[1] * labB[1] + labB[2] * labB[2]);\n        var deltaC = c1 - c2;\n        var deltaH = deltaA * deltaA + deltaB * deltaB - deltaC * deltaC;\n        deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);\n        var sc = 1.0 + 0.045 * c1;\n        var sh = 1.0 + 0.015 * c1;\n        var deltaLKlsl = deltaL / (1.0);\n        var deltaCkcsc = deltaC / (sc);\n        var deltaHkhsh = deltaH / (sh);\n        var i = deltaLKlsl * deltaLKlsl + deltaCkcsc * deltaCkcsc + deltaHkhsh * deltaHkhsh;\n        return i < 0 ? 0 : Math.sqrt(i);\n      }\n  \n    function hideOrb() {\n        document.querySelector('.orb').style.display = 'none';\n    }\n    \n    window.startTimer = function()\n    {\n        // get random number\n        let randomRGB = randomRGBGenerator();\n        let colorName = 'rgb('+randomRGB.r+','+randomRGB.g+','+randomRGB.b+')';\n    \n        el.style.setProperty(property, colorName);\n    \n    \n        var colorname2 =  $(\"#box2\").css( \"background-color\" );\n    \n        var rangecolor =  deltaE(rgb2lab(getRGB(colorName)) , rgb2lab(getRGB(colorname2)));\n        fadeDuration = randomDuration();\n        seconds +=  fadeDuration / 1000;\n        \n        if (rangecolor >= 0 && rangecolor <= 20){\n            stopRecording();  \n             $(\".message2\").text(`Congratulations! ${seconds} seconds. Colour match \n            within range qualifying for Proof of Magician status.`);\n            $(\".message3\").text('This is your NFT access key to the Miracle Network. ');\n            stopTimer()\n            $(\"#box\").fadeIn();\n            hideOrb();\n            return false\n        }\n    \n        // - [ ] this is where the color should fade to white.\n        // set to white after 2500ms\n        setTimeout(function() {\n            el.style.setProperty(property, 'rgb(255, 255, 255);');\n        }, 2500)\n    \n        if (sameColor(consecutiveColors[0], randomRGB)) {\n            consecutiveColors.push(randomRGB);\n        } else {\n            consecutiveColors = [randomRGB];\n        }\n        \n        if (consecutiveColors.length >= 3) {\n            // console.log('Consciousness confirmed!');\n        }\n  \n        // sec.innerText = seconds + ' seconds'\n    \n        $(\"#box\").fadeIn(fadeDuration / 2);\n        $(\"#box\").fadeOut(fadeDuration / 2);\n    \n        // console.log('consecutiveColors.length: '+consecutiveColors.length);\n        // document.getElementById('boxText').innerHTML = seconds + ' seconds';\n    \n        // console.log('random duration: ', fadeDuration);\n        // console.log('seconds: ', seconds);\n    \n        timerStatus = setTimeout(startTimer, fadeDuration)        \n    }\n    \n     const stopTimer = function()\n    {   \n        hideOrb();\n        $(\".message2\").text(`Congratulations! ${seconds} seconds. Colour match \n        within range qualifying for Proof of Magician status.`);\n        $(\".message3\").text('This is your NFT access key to the Miracle Network.');\n        stopTimer()\n        $(\"#box\").fadeIn();\n        startBtn.removeAttribute(\"disabled\");\n        // stopBtn.removeAttribute(\"enabled\");\n        // stopBtn.setAttribute(\"disabled\", \"disabled\");\n        startBtn.setAttribute(\"enabled\", \"enabled\");\n        clearInterval(timerStatus)        \n    }\n    \n    startBtn.addEventListener(\"click\", function() {\n        // stopBtn.removeAttribute(\"disabled\");\n        document.querySelector('#noticeBarContainer').style.display = 'none';\n        startBtn.removeAttribute(\"enabled\");\n        startBtn.setAttribute(\"disabled\", \"disabled\");\n        // stopBtn.setAttribute(\"enabled\", \"enabled\");\n    });\n\n    document.addEventListener('keyup', function (e) {\n        console.log('Event fired');\n        if (e.key === \"Escape\") {\n            stopTimer();\n        }\n      })\n});\n","import styled from \"styled-components\";\n\n\n\nexport const BrandingContainer = styled.div`\n  display: flex;\n  padding: 0 8px;\n  align-content: center;\n`;\n\nexport const ColorOrb = styled.div`\n  z-index: 1;\n  height: 165.77px;\n  width: 165.77px;\n  border-radius: 100%;\n  background-color: rgb(255,255,255 );\n  text-align: center;\n  color: white;\n  font-size: 23px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: -109px;\n  position: absolute;\n  top: -117px;\n  bottom: 0;\n  left: -3px;\n  margin: auto;\n  right: 0;\n`\nexport const BackgroundWithColor = styled.div`\n  position: absolute;\n  top: 0;\n  z-index: -1;\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  align-items:center;\n  justify-content: center;\n`\n\nexport const Body = styled.div`\n  align-items: center;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  justify-content: center;\n  margin-top: 40px;\n`;\n\nexport const Button = styled.button`\n  background-color: white;\n  border: none;\n  border-radius: 8px;\n  color: #282c34;\n  cursor: pointer;\n  font-size: 16px;\n  margin: 0px 20px;\n  padding: 12px 24px;\n  text-align: center;\n  text-decoration: none;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh);\n`;\n\nexport const Header = styled.header`\n  align-items: center;\n  background-color: #282c34;\n  color: white;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  height: 64px;\n  justify-content: space-between;\n`;\n\nexport const Image = styled.img`\n  height: 40vmin;\n  margin-bottom: 16px;\n  pointer-events: none;\n`;\n\nexport const Link = styled.a.attrs({\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n})`\n  color: #61dafb;\n  margin-top: 8px;\n`;\n\n\nexport const NoticeBarContainer = styled.div`\n  position: fixed;\n  width: calc(100% - 48px);\n  left: 8px; \n  bottom: 24px;\n  display: flex;\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nexport const NoticeBar = styled.div`\n\theight: 48px;\n\tpadding: 16px;\n  color: black;\n\tmargin-bottom: 16px;\n\tfont-size:16px;\n  margin-left: 16px;\n\tline-height: 16px;\n\tbackground: #FFFFFF;\n\tborder: 1px solid #BCBCBC;\n\tbox-sizing: border-box;\n\tbox-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n\tborder-radius: 6px;\n  @media (max-width: 768px) {\n    width: 100%;\n    font-size: 14px;\n    line-height: 21px;\n    height: auto;\n  }\n`;\n\nexport const NoticeBar2 = styled.div`\n\theight: 48px;\n\tpadding: 8px 16px;\n  color: black;\n\tmargin-bottom: 16px;\n\tfont-size:16px;\n  margin-left: 16px;\n\tline-height: 16px;\n\tbackground: #FFFFFF;\n\tborder: 1px solid #BCBCBC;\n\tbox-sizing: border-box;\n\tbox-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n\tborder-radius: 6px;\n  @media (max-width: 768px) {\n    width: 100%;\n    font-size: 14px;\n    line-height: 21px;\n    height: auto;\n  }\n`;\n\nexport const NoticeButton = styled.button`\n  height: 32px;\n  margin:0 8px;\n  padding: 0 24px;\n  background: #69BF9B;\n  border: 1px solid rgba(0, 0, 0, 0.33);\n  box-sizing: border-box;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  border-radius: 6px;\n  font-family: 'Inter';\n  font-weight: 400;\n  font-size: 16px;\n  color: #EBFFF7;\n  @media (max-width: 768px) {\n    font-size: 14px;\n  }\n`;","import React from 'react'\nimport { screenRecord } from \"../utilities/screenRecord\";\nimport { ReactComponent as OrbSVG } from '../assets/orb.svg'\nimport { ReactComponent as Emblem } from '../assets/emblem.svg'\nimport $ from 'jquery'\n\nimport './animation'\nimport { NoticeBar, NoticeBar2, NoticeBarContainer, NoticeButton } from '.';\n\nclass ScreenRecorder extends React.Component {\n\n  state = {\n    initiated: false,\n    mediaRecorder: null,\n    stream: null,\n    blob: null,\n    url: null\n  }\n\n  async componentDidMount() {\n    this.recorder = new screenRecord();\n    // await this.recorder.setupStream();\n    console.log('this.recorder', this.recorder);\n\n    this.chunks = this.recorder.chunks;\n    this.blob = this.recorder.blob;\n    this.url = this.recorder.url;\n    this.startRecording = this.recorder.startRecording;\n    this.stopRecording = this.recorder.stopRecording;\n  }\n\n  constructor() {\n    super();\n    this.handleStop = this.handleStop.bind(this);\n    window.handleStop = this.handleStop;\n    $(document).on('keyup', function(e) {\n      if (e.key === \"Escape\") { // escape key maps to keycode `27`\n        // stopTimer();\n        window.handleStop();\n      }\n    });\n  }\n\n  getBlob() {\n    return this.blob;\n  }\n\n  async handleStart() {\n    const { \n      addBlobToIPFS, \n      account, \n      mintToken,\n      send,\n      ipfsResultObj\n    } = this.props\n    const {\n      mediaRecorder,\n      stream,\n    } = await this.startRecording(\n      addBlobToIPFS,\n       account,\n      '11',\n      mintToken,\n      send,\n      ipfsResultObj\n    )\n\n    console.log('mediaRecorder',mediaRecorder)\n\n    this.setState({\n      mediaRecorder: mediaRecorder,\n      stream: stream\n    })\n  }\n\n  handleStop() {\n    this.stopRecording(this.state.mediaRecorder, this.state.stream)\n  }\n\n  render() {\n    console.log('chunks', this.chunks)\n    const { ipfsResultObj } = this.props;\n    const etherscanURI = `https://rinkeby.etherscan.io/token/0x51c449b5fd5dee173658546b993bd1680fc61a02?a=${1}`\n\n    return (\n       <div className=\"main\">\n          <div className=\"orb\">\n            <div className=\"row\">\n              <div className='image-orb'>\n                <OrbSVG/>\n        \n                <div className=\"white-circle\">\n                </div>\n        \n                <div id=\"box\">\n                  <span id=\"boxText\"></span>\n                </div>\n        \n              </div>\n            </div>\n        \n            <div className=\"row buttons-row\">\n              <div id=\"box2\">\n                <span id=\"box2Text\"></span>\n              </div>\n              {/* <div className=\"start\">\n                <button id=\"start\" onClick={() => this.handleStart()}>Start</button>\n              </div>\n              <div className=\"stop\">\n                <button id=\"stop\" onClick={() => this.handleStop()}>Stop</button>\n              </div> */}\n            </div>\n            {/* <div className=\"status\">\n              <div className=\"color-match-msg\"></div>\n              <div className='message'>Use your mind to match the color of the background to the orb.</div>\n            </div> */}\n            <NoticeBarContainer id='noticeBarContainer'>\n              <NoticeBar>Use your mind to match the color of the background to the orb.</NoticeBar>\n              <NoticeBar2>{`Press`}<NoticeButton id=\"start\" onClick={() => this.handleStart()}>Start</NoticeButton>{`to begin.`}</NoticeBar2>\n            </NoticeBarContainer>\n          </div>\n\n          <div className=\"pop_up\">\n            <div className='message2'></div>\n            <div className='message3'></div>\n\n            <div style={{display: 'none'}} className=\"videoPlayer\">\n              <video className=\"video\" width=\"600px\" controls=\"\" src=\"\" style={{pointerEvents: 'none'}} autoPlay=\"\" playsInline=\"\" loop=\"\"></video>\n              <div className='nft-section'>\n                <Emblem className='nft-emblem' />\n                <p className='nft-title'>Proof of Magician</p>\n                <p className='nft-token-id'>#0006</p>\n                <p>View on <a href={etherscanURI}>Etherscan</a></p>\n                <p>View on<a href={ipfsResultObj !== undefined ? ipfsResultObj.metadataURI : ''}>IPFS</a></p>\n              </div>\n            </div>\n          </div>\n        </div>  \n    );\n  }\n}\n\nexport default ScreenRecorder ","export const ipfsAddOptions = {\n  cidVersion: 1,\n  hashAlg: 'sha2-256'\n}\nconst ipfsGatewayURL = 'https://ipfs.io/ipfs';\n\nexport function makeGatewayURL(ipfsURI) {\n  return ipfsGatewayURL + '/' + stripIpfsUriPrefix(ipfsURI)\n}\n\nexport function stripIpfsUriPrefix(cidOrURI) {\n  if (cidOrURI.startsWith('ipfs://')) {\n      return cidOrURI.slice('ipfs://'.length)\n  }\n  return cidOrURI\n}\n\n// function createFileFromBuffer(buffer, filePath) {\n//   const webmBuffers = [buffer];\n\n//   const webmReadable = new Readable();\n//   webmReadable._read = () => {  };\n//   webmBuffers.forEach(chunk => {\n//       webmReadable.push(chunk);\n//   });\n//   webmReadable.push(null);\n\n//   const outputWebmStream = fs.createWriteStream(filePath);\n//   return webmReadable.pipe(outputWebmStream);\n// }\n\n  /**\n  * Helper to construct metadata JSON for \n  * @param {string} assetCid - IPFS URI for the NFT asset\n  * @param {object} options\n  * @param {?string} name - optional name to set in NFT metadata\n  * @param {?string} description - optional description to store in NFT metadata\n  * @returns {object} - NFT metadata object\n  */\nexport async function makeNFTMetadata(assetURI, options) {\n  const {name, description} = options;\n  assetURI = ensureIpfsUriPrefix(assetURI)\n  return {\n      name,\n      description,\n      video: assetURI\n  }\n}\n\nexport function ensureIpfsUriPrefix(cidOrURI) {\n  let uri = cidOrURI.toString()\n  if (!uri.startsWith('ipfs://')) {\n      uri = 'ipfs://' + cidOrURI\n  }\n  // Avoid the Nyan Cat bug (https://github.com/ipfs/go-ipfs/pull/7930)\n  if (uri.startsWith('ipfs://ipfs/')) {\n    uri = uri.replace('ipfs://ipfs/', 'ipfs://')\n  }\n  return uri\n}\n\n// fs.writeFile(\"/tmp/test\", \"Hey there!\", function(err) {\n//   if(err) {\n//       return console.log(err);\n//   }\n//   console.log(\"The file was saved!\");\n// }); \n\n// app.put('/ipfs', async (req, res) => {\n//   console.log(`request is ${req.body}`);\n//   console.log(util.inspect(req.body, {showHidden: false, depth: null, colors: true}))\n//   // console.log(JSON.stringify(req, null, 4));\n//   const buffer = req.body;\n//   //const buffer = Buffer.from( await blob.arrayBuffer() );\n//   fs.writeFile('/tmp/pom-1.webm', buffer, {}, (err, res) => {\n//     if(err){\n//         console.error(err)\n//         return\n//     }\n//     console.log('video saved')\n//   });\n\n//   let ipfs = IPFSHTTPClient;\n//   try {\n//     ipfs = create({\n//       url: \"https://ipfs.infura.io:5001/api/v0\",\n//     });\n//   } catch (error) {\n//     console.error(\"IPFS error \", error);\n//     ipfs = undefined;\n//   }\n\n//   const result = await ipfs.add('/tmp/pom-1.webm', ipfsAddOptions);\n\n//   console.info('result', result)\n//   console.info('path', result.path)\n//   console.info('cid', result.cid.toString())\n\n//   res.json({\n//     cid: result.cid.toString(),\n//     path: result.path,\n//   })\n\n// });\n\n// Works!\n// const obj = {\n//   hello: 'world'\n// };\n// const blob = new Blob([JSON.stringify(obj, null, 2)], {type : 'application/json'});\n\n// axios.post(`http://localhost:${PORT}/ipfs`, {\n//   blob // this automatically sets it to blob: blob\n// })\n// .then(function (response) {\n//   console.log(response);\n// })\n// .catch(function (error) {\n//   console.log(error);\n// });","import { useQuery } from \"@apollo/client\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { shortenAddress, useContractFunction, useEthers, useLookupAddress } from \"@usedapp/core\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios'\n\nimport { addresses, abis } from \"@my-app/contracts\";\nimport ScreenRecorder from \"./components/screenRecorder\";\nimport { Body, Button, Container, Header, BrandingContainer, Link } from \"./components\";\nimport connect from '@aragon/connect'\nimport connectTokens from '@aragon/connect-tokens'\nimport { create, IPFSHTTPClient } from 'ipfs-http-client'\nimport { ReactComponent as Emblem } from './assets/emblem.svg'\n\nimport {\n  ensureIpfsUriPrefix,\n  makeNFTMetadata,\n  makeGatewayURL,\n  ipfsAddOptions\n} from './utilities/ipfs-helpers'\n\nasync function daoNetwork() {\n  // Initiates the connection to an organization\n  // const org = await connect('miraclenetwork.aragonid.eth', 'thegraph', { network: 4 })\n\n  // // Fetch the apps belonging to this organization\n  // const apps = await org.apps()\n  // apps.forEach(console.log)\n  \n  // console.log(org.app('token-manager'))\n\n  // const tokens = await connectTokens(org.app('token-manager'))\n\n  // console.log('tokens', tokens)\n}\n\nfunction WalletButton() {\n  const [rendered, setRendered] = useState(\"\");\n\n  const ens = useLookupAddress();\n  const { account, activateBrowserWallet, deactivate, error } = useEthers();\n\n  // These functions only run when the second parameter changes.\n  // param1 = the callback function (EFFECT)\n  // param2 = the array of variables (CAUSE)\n  useEffect(() => {\n    if (ens) {\n      setRendered(ens);\n    } else if (account) {\n      setRendered(shortenAddress(account));\n    } else {\n      setRendered(\"\");\n    }\n  }, [account, ens, setRendered]);\n\n  // These functions only run when the second parameter changes.\n  // param1 = the callback function (EFFECT)\n  // param2 = the array of variables (CAUSE)\n  useEffect(() => {\n    if (error) {\n      console.error(\"Error while connecting wallet:\", error.message);\n    }\n  }, [error]);\n\n  return (\n    <Button\n      onClick={() => {\n        if (!account) {\n          activateBrowserWallet();\n        } else {\n          deactivate();\n        }\n      }}\n    >\n      {rendered === \"\" && \"Connect Wallet\"}\n      {rendered !== \"\" && rendered}\n    </Button>\n  );\n}\n\nclass ProofofMagician extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.addBlobToIPFS = this.addBlobToIPFS.bind(this)\n    this.mintToken = this.mintToken.bind(this)\n\n    this.state = {\n      ipfsResultObj: {},\n      minted: false,\n      contract: new Contract(addresses.ceaErc20, abis.erc20)\n    }\n    daoNetwork();\n  }\n\n  async mintToken(metadataURI, account, send) { \n    console.log('this.state.minted', this.state.minted)\n    console.log('metadataURI', metadataURI)\n    if(metadataURI && this.state.minted === false) {\n      // this.setState({ minted: true }, () => {\n      //   console.log(this.state.minted, 'minted');\n      // }); \n      const tokenId = await send(\n        account,\n        metadataURI\n      )\n      console.log(this.state)\n\n      // const tokenId = await this.state.contract.mintToken(\n      //   account,\n      //   metadataURI\n      // )\n      console.log('tokenId', tokenId)\n      \n      return tokenId\n    }\n  }\n\n  async clientSideCalltoIPFS(buffer, account) {\n    const basename =  'proof-of-magician.webm';\n    const ipfsPath = '/nft/' + basename;\n\n    const ownerAddress = account;\n\n    console.log('buffer', buffer);\n    // console.log(writeStream.path);\n    // console.log('file', file)\n\n    let ipfs = IPFSHTTPClient;\n    try {\n      ipfs = create({\n        url: \"https://ipfs.infura.io:5001/api/v0\",\n      });\n      \n    } catch (error) {\n      console.error(\"IPFS error \", error);\n      ipfs = undefined;\n    }\n    // const ipfsResponse = await ipfs.add(file, ipfsAddOptions);\n    const ipfsResponse = await ipfs.add(\n      {\n        // The path you want the file to be accessible at from the root CID _after_ it has been added\n        path: ipfsPath,\n        // The contents of the file (see below for definition)\n        content: buffer,\n        // File mode to store the entry with (see https://en.wikipedia.org/wiki/File_system_permissions#Numeric_notation)\n        mode: '-r--r--r--'\n      }, \n      ipfsAddOptions\n    )\n\n    const { cid: assetCid } = ipfsResponse;\n    const assetURI = ensureIpfsUriPrefix(assetCid) + '/' + basename\n    \n    console.log('ipfsResponse', ipfsResponse)\n\n    const metadata = await makeNFTMetadata(assetURI, {\n      name: `Proof of Magician`,\n      description: 'This NFT is literally proof of your magician abilities',\n      owner: ownerAddress\n    })\n\n    // // add the metadata to IPFS\n    const { cid: metadataCid } = await ipfs.add({\n      path: '/nft/metadata.json', \n      content: JSON.stringify(metadata)\n    }, ipfsAddOptions);\n    const metadataURI = ensureIpfsUriPrefix(metadataCid) + '/metadata.json'\n\n    const result = {\n      // tokenId,\n      ownerAddress: ownerAddress,\n      metadata: metadata,\n      assetURI: assetURI,\n      metadataURI: metadataURI,\n      assetGatewayURL: makeGatewayURL(assetURI),\n      metadataGatewayURL: makeGatewayURL(metadataURI),\n    }\n\n    return result;\n\n    // res.json(result);\n  }\n\n  async addBlobToIPFS(blob, account, number, mintToken, send) {\n    \n    let that = this;\n\n    this.clientSideCalltoIPFS(blob, account).then(async function (response) {\n      //handle success\n      console.log('ipfsResultObj 1', response);\n      that.setState({\n        ipfsResultObj: response.data\n      });\n\n      const tokenID = await mintToken(response.metadataURI, account, send);\n      console.log(`Token minted. TokenId = ${tokenID}`)\n    })\n    .catch(function (response) {\n      //handle error\n      console.log(response);\n    });\n     \n    // axios({\n    //   method: 'post',\n    //   url: `http://localhost:${'3002'}/ipfs`,\n    //   data: data,\n    //   headers: {'Content-Type': 'multipart/form-data' }\n    // }).then(function (response) {\n    //     //handle success\n    //     console.log(response);\n    //     that.setState({\n    //       ipfsResultObj: response.data\n    //     });\n\n    //     const tokenID = mintToken(response.data.metadataURI, account, send);\n    //     console.log(`Token minted. TokenId = ${tokenID}`)\n    // })\n    // .catch(function (response) {\n    //     //handle error\n    //     console.log(response);\n    // });\n  }\n  \n  render() {\n    const { ipfsResultObj } = this.state;\n    console.log('ipfsResultObj', ipfsResultObj )\n\n    return (\n      <App \n        ipfsResultObj={ipfsResultObj} \n        addBlobToIPFS={this.addBlobToIPFS} \n        mintToken={this.mintToken} \n        contract={this.state.contract}   \n      />\n    )\n  }\n}\n\nfunction App({ ipfsResultObj, addBlobToIPFS, mintToken, contract }) {\n  const { account } = useEthers();\n\n  console.log('contract', contract)\n\n  const { send, state } = useContractFunction(\n    contract,\n    \"mintToken\"\n  )\n\n  console.log('mintToken state',state)\n\n  return (\n    <Container>\n      <Header>\n        <BrandingContainer>\n          <Emblem/>\n          <p>Proof of Magician</p>\n        </BrandingContainer>\n        <WalletButton />\n      </Header>\n      <Body>\n        <ScreenRecorder \n          addBlobToIPFS={addBlobToIPFS} \n          account={account}\n          mintToken={mintToken}\n          send={send}\n          ipfsResultObj={ipfsResultObj}\n        />\n      </Body>\n    </Container>\n  );\n}\n\nexport default ProofofMagician;\n","import \"./index.css\";\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport { DAppProvider, Mainnet } from \"@usedapp/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport ProofofMagician from \"./App\";\n\n// Change this to your own Infura project id: https://infura.io/register\nconst INFURA_PROJECT_ID = \"defba93b47f748f09fcead8282b9e58e\";\nconst config = {\n  readOnlyChainId: Mainnet.chainId,\n  readOnlyUrls: {\n    [Mainnet.chainId]: \"https://mainnet.infura.io/v3/\" + INFURA_PROJECT_ID,\n  },\n}\n\n// You should replace this url with your own and put it into a .env file\n// See all subgraphs: https://thegraph.com/explorer/\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://api.thegraph.com/subgraphs/name/paulrberg/create-eth-app\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <DAppProvider config={config}>\n      <ApolloProvider client={client}>\n        <ProofofMagician />\n      </ApolloProvider>\n    </DAppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}