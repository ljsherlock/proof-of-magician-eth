{"version":3,"sources":["../../contracts/src/abis.js","../../contracts/src/addresses.js","utilities/screenRecord.js","components/screenRecorder.js","components/index.js","graphql/subgraph.js","App.js","index.js"],"names":["abis","erc20","ownable","addresses","ceaErc20","screenRecord","this","chunks","blob","url","mediaRecorder","stream","startRecording","bind","stopRecording","addBlobToIPFS","account","number","mintToken","send","ipfsResultObj","a","setState","ipfsResult","navigator","mediaDevices","getDisplayMedia","preferCurrentTab","MediaRecorder","mimeType","ondataavailable","e","console","log","data","push","onstop","Blob","type","start","stop","getTracks","forEach","track","ScreenRecorder","state","initiated","recorder","props","src","onClick","handleStart","handleStop","React","Component","Body","styled","div","Button","button","Container","Header","header","img","attrs","target","rel","gql","WalletButton","useState","rendered","setRendered","ens","useLookupAddress","useEthers","activateBrowserWallet","deactivate","error","useEffect","shortenAddress","message","ProofofMagician","minted","metadataURI","tokenId","FormData","append","that","axios","method","headers","then","response","tokenID","catch","App","contract","Contract","useContractFunction","config","readOnlyChainId","Mainnet","chainId","readOnlyUrls","client","ApolloClient","cache","InMemoryCache","uri","ReactDOM","render","StrictMode","DAppProvider","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.98e8617e.chunk.js","sourcesContent":["import erc20Abi from \"./abis/erc20.json\";\nimport ownableAbi from \"./abis/ownable.json\";\n\nconst abis = {\n  erc20: erc20Abi,\n  ownable: ownableAbi,\n};\n\nexport default abis;\n","\n// This address points to a dummy ERC-20 contract. Replace it with your own smart contracts.\nconst addresses = {\n  ceaErc20: \"0x51C449b5FD5dee173658546b993Bd1680fC61a02\",\n};\nexport default addresses;\n","\nexport class screenRecord {\n  \n  chunks;\n  blob;\n  url;\n  startRecording;\n  stopRecording;\n  mediaRecorder\n  \n  constructor() {\n    this.chunks = [];\n    this.blob = null;\n    this.url = null;\n    this.mediaRecorder = null;\n    this.stream = null;\n    this.startRecording.bind(this)\n    this.stopRecording.bind(this)\n  }\n\n  async startRecording(\n    addBlobToIPFS, \n    account, \n    number,\n    mintToken,\n    send,\n    ipfsResultObj\n  ) {  ;\n\n    this.setState({\n      ipfsResult: null\n    })\n\n    this.stream = await navigator.mediaDevices.getDisplayMedia({\n      // video: true,\n      preferCurrentTab: true\n    });\n  \n    this.mediaRecorder = new MediaRecorder(this.stream, {\n      mimeType: \"video/webm\"\n    });\n\n    var chunks = [];\n\n    this.mediaRecorder.ondataavailable = function(e) {\n      console.log('e.data', e.data)\n      console.log('chunks', chunks)\n      chunks.push(e.data)\n    }\n\n    console.log('recording');\n    console.log('this.mediaRecorder', this.mediaRecorder);\n    // possible callback function.\n  \n    this.mediaRecorder.onstop = function() {\n      var blob = new Blob(chunks, {\n          // type: chunks[0].type\n          type: 'video/webm',\n      })\n\n      console.log(blob)\n\n      const result = addBlobToIPFS(blob, account, number, mintToken, send);\n    };\n    \n  \n    //we have to start the recorder manually\n    this.mediaRecorder.start();\n    // start.style.display = \"none\";\n    // stop.style.display = \"\";\n\n    return {\n      mediaRecorder: this.mediaRecorder,\n      stream: this.stream\n    };\n  }\n\n  stopRecording(mediaRecorder, stream) {\n    console.log('mediaRecorder', mediaRecorder)\n    mediaRecorder.stop();\n    stream.getTracks().forEach(function(track) {\n      track.stop();\n    });\n  }\n}\n\n","import React from 'react'\nimport { screenRecord } from \"../utilities/screenRecord\";\n\nclass ScreenRecorder extends React.Component {\n\n  state = {\n    initiated: false,\n    mediaRecorder: null,\n    stream: null,\n    blob: null,\n    url: null\n  }\n\n  async componentDidMount() {\n    this.recorder = new screenRecord();\n    // await this.recorder.setupStream();\n    console.log('this.recorder', this.recorder);\n\n    this.chunks = this.recorder.chunks;\n    this.blob = this.recorder.blob;\n    this.url = this.recorder.url;\n    this.startRecording = this.recorder.startRecording;\n    this.stopRecording = this.recorder.stopRecording;\n  }\n\n  getBlob() {\n    return this.blob;\n  }\n\n  async handleStart() {\n    const { \n      addBlobToIPFS, \n      account, \n      mintToken,\n      send,\n      ipfsResultObj\n    } = this.props\n    const {\n      mediaRecorder,\n      stream,\n    } = await this.startRecording(\n      addBlobToIPFS,\n       account,\n      '11',\n      mintToken,\n      send,\n      ipfsResultObj\n    )\n\n    console.log('mediaRecorder',mediaRecorder)\n\n    this.setState({\n      mediaRecorder: mediaRecorder,\n      stream: stream\n    })\n  }\n\n  handleStop() {\n    this.stopRecording(this.state.mediaRecorder, this.state.stream)\n  }\n\n  render() {\n    console.log('chunks', this.chunks)\n\n    return (\n      <div>\n        <video src={this.url} />\n\n        <button onClick={() => this.handleStart()}>Start Recording</button>\n        <button onClick={() => this.handleStop()}>Stop Recording</button>\n\n      </div>\n    );\n  }\n}\n\nexport default ScreenRecorder ","import styled from \"styled-components\";\n\nexport const Body = styled.div`\n  align-items: center;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  justify-content: center;\n  margin-top: 40px;\n`;\n\nexport const Button = styled.button`\n  background-color: white;\n  border: none;\n  border-radius: 8px;\n  color: #282c34;\n  cursor: pointer;\n  font-size: 16px;\n  margin: 0px 20px;\n  padding: 12px 24px;\n  text-align: center;\n  text-decoration: none;\n`;\n\nexport const Container = styled.div`\n  background-color: #282c34;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh);\n`;\n\nexport const Header = styled.header`\n  align-items: center;\n  background-color: #282c34;\n  color: white;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  min-height: 70px;\n`;\n\nexport const Image = styled.img`\n  height: 40vmin;\n  margin-bottom: 16px;\n  pointer-events: none;\n`;\n\nexport const Link = styled.a.attrs({\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n})`\n  color: #61dafb;\n  margin-top: 8px;\n`;\n","import { gql } from \"@apollo/client\";\n\n// See more example queries on https://thegraph.com/explorer/subgraph/paulrberg/create-eth-app\nconst GET_TRANSFERS = gql`\n  {\n    transfers(first: 10) {\n      id\n      from\n      to\n      value\n    }\n  }\n`;\n\nexport default GET_TRANSFERS;\n","import { useQuery } from \"@apollo/client\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { shortenAddress, useContractFunction, useEthers, useLookupAddress } from \"@usedapp/core\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios'\nimport Web3 from 'web3';\n\nimport { addresses, abis } from \"@my-app/contracts\";\nimport ScreenRecorder from \"./components/screenRecorder\";\nimport { Body, Button, Container, Header, Image, Link } from \"./components\";\nimport GET_TRANSFERS from \"./graphql/subgraph\";\n\nfunction WalletButton() {\n  const [rendered, setRendered] = useState(\"\");\n\n  const ens = useLookupAddress();\n  const { account, activateBrowserWallet, deactivate, error } = useEthers();\n\n  // These functions only run when the second parameter changes.\n  // param1 = the callback function (EFFECT)\n  // param2 = the array of variables (CAUSE)\n  useEffect(() => {\n    if (ens) {\n      setRendered(ens);\n    } else if (account) {\n      setRendered(shortenAddress(account));\n    } else {\n      setRendered(\"\");\n    }\n  }, [account, ens, setRendered]);\n\n  // These functions only run when the second parameter changes.\n  // param1 = the callback function (EFFECT)\n  // param2 = the array of variables (CAUSE)\n  useEffect(() => {\n    if (error) {\n      console.error(\"Error while connecting wallet:\", error.message);\n    }\n  }, [error]);\n\n  return (\n    <Button\n      onClick={() => {\n        if (!account) {\n          activateBrowserWallet();\n        } else {\n          deactivate();\n        }\n      }}\n    >\n      {rendered === \"\" && \"Connect Wallet\"}\n      {rendered !== \"\" && rendered}\n    </Button>\n  );\n}\n\nclass ProofofMagician extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.addBlobToIPFS = this.addBlobToIPFS.bind(this)\n    this.mintToken = this.mintToken.bind(this)\n\n    this.state = {\n      ipfsResultObj: {},\n      minted: false,\n    }\n  }\n\n  async mintToken(metadataURI, account, send) { \n    console.log('this.state.minted', this.state.minted)\n    console.log('metadataURI', metadataURI)\n    if(metadataURI && this.state.minted === false) {\n      // this.setState({ minted: true }, () => {\n      //   console.log(this.state.minted, 'minted');\n      // }); \n      const tokenId = await send(\n        account,\n        metadataURI\n      )\n      console.log('tokenId', tokenId)\n      \n      return tokenId\n    }\n  }\n\n  async addBlobToIPFS(blob, account, number, mintToken, send) {\n    console.log('account:', account)\n    let data = new FormData();\n    data.append('blob', blob);\n    data.append('account', account);\n    let that = this;\n    \n    axios({\n      method: 'post',\n      url: `http://localhost:${'3002'}/ipfs`,\n      data: data,\n      headers: {'Content-Type': 'multipart/form-data' }\n    }).then(function (response) {\n        //handle success\n        console.log(response);\n        that.setState({\n          ipfsResultObj: response.data\n        });\n\n        const tokenID = mintToken(response.data.metadataURI, account, send);\n        console.log(`Token minted. TokenId = ${tokenID}`)\n    })\n    .catch(function (response) {\n        //handle error\n        console.log(response);\n    });\n  }\n  \n  render() {\n    const { ipfsResultObj } = this.state;\n    console.log('changed')\n\n    return (\n      <App ipfsResultObj={ipfsResultObj} addBlobToIPFS={this.addBlobToIPFS} mintToken={this.mintToken} />\n    )\n  }\n}\n\nfunction App({ ipfsResultObj, addBlobToIPFS, mintToken }) {\n  // console.log('ipfsResultObj', ipfsResultObj)\n  // we have it.\n\n  const { account } = useEthers();\n  // const metadataURI = ipfsResultObj ? ipfsResultObj.metadataURI : '';\n  // const { loading, error: subgraphQueryError, data } = useQuery(GET_TRANSFERS);\n\n  // useEffect(() => {\n  //   if (subgraphQueryError) {\n  //     console.error(\"Error while querying subgraph:\", subgraphQueryError.message);\n  //     return;\n  //   }\n  //   if (!loading && data && data.transfers) {\n  //     console.log({ transfers: data.transfers });\n  //   }\n  // }, [loading, subgraphQueryError, data]);\n\n  const contract = new Contract(addresses.ceaErc20, abis.erc20);\n  console.log('contract', contract)\n\n  const { send } = useContractFunction(\n    contract,\n    \"mintToken\"\n  )\n\n  return (\n    <Container>\n      <Header>\n        <WalletButton />\n      </Header>\n      <Body>\n        <ScreenRecorder \n          addBlobToIPFS={addBlobToIPFS} \n          account={account}\n          mintToken={mintToken}\n          send={send}\n          ipfsResultObj={ipfsResultObj}\n        />\n      </Body>\n    </Container>\n  );\n}\n\nexport default ProofofMagician;\n","import \"./index.css\";\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport { DAppProvider, Mainnet } from \"@usedapp/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport ProofofMagician from \"./App\";\n\n// Change this to your own Infura project id: https://infura.io/register\nconst INFURA_PROJECT_ID = \"defba93b47f748f09fcead8282b9e58e\";\nconst config = {\n  readOnlyChainId: Mainnet.chainId,\n  readOnlyUrls: {\n    [Mainnet.chainId]: \"https://mainnet.infura.io/v3/\" + INFURA_PROJECT_ID,\n  },\n}\n\n// You should replace this url with your own and put it into a .env file\n// See all subgraphs: https://thegraph.com/explorer/\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://api.thegraph.com/subgraphs/name/paulrberg/create-eth-app\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <DAppProvider config={config}>\n      <ApolloProvider client={client}>\n        <ProofofMagician />\n      </ApolloProvider>\n    </DAppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}